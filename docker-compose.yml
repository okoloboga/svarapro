version: '3.8'

services:
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
      cache_from:
        - nginx:1.27-alpine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
    environment:
      - VITE_APP_URL=http://nginx
      - VITE_WS_URL=/socket.io
      - VITE_API_URL=http://localhost/api/v1
    networks:
      - app-network

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      cache_from:
        - node:20.17.0-alpine
    env_file:
      - ./server/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    restart: on-failure
    networks:
      - app-network

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
      cache_from:
        - node:20.17.0-alpine
    env_file:
      - ./bot/.env
    depends_on:
      - nginx
    networks:
      - app-network

  postgres:
    image: public.ecr.aws/docker/library/postgres:15
    # image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "log_connections=true", "-c", "log_disconnections=true"]
    networks:
      - app-network

  redis:
    image: public.ecr.aws/docker/library/redis:7-alpine
    # image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
