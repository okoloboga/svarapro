import { useEffect, useState, useCallback, useRef } from 'react';
import { GameRoomProps, GameState } from '@/types/game';
import { NotificationType } from '@/types/components';
import { Notification } from '@/components/Notification';
import { useGameState } from '@/hooks/useGameState';
import GameTable from '../../components/GameProcess/GameTable';
import { ActionButtons } from '../../components/GameProcess/ActionButton';
import { BetSlider } from '../../components/GameProcess/BetSlider';
import { Socket } from 'socket.io-client';
import { LoadingPage } from '../../components/LoadingPage';
import { PlayerSpot } from '../../components/GameProcess/PlayerSpot';
import { SeatButton } from '../../components/GameProcess/SeatButton';
import { UserData, PageData } from '@/types/entities';
import FlyingChip from '../../components/GameProcess/FlyingChip';
import FlyingCard from '../../components/GameProcess/FlyingCard';
import { Page } from '@/types/page';
import backgroundImage from '../../assets/game/background.jpg';
import menuIcon from '../../assets/game/menu.svg';
import chatButton from '../../assets/game/chatButton.png';
import { GameMenu } from '../../components/GameProcess/GameMenu';
import { ChatMenu } from '../../components/GameProcess/ChatMenu';
import { SvaraAnimation } from '../../components/GameProcess/SvaraAnimation';
import { SvaraJoinPopup } from '../../components/GameProcess/SvaraJoinPopup';
import { TURN_DURATION_SECONDS } from '@/constants';
import { useHapticFeedback } from '@/hooks/useHapticFeedback';
import { useAppBackButton } from '@/hooks/useAppBackButton';

interface ChipAnimation {
  id: string;
  fromX: number;
  fromY: number;
  toX: number;
  toY: number;
  delay: number;
}

interface CardAnimation {
  id: string;
  fromX: number;
  fromY: number;
  toX: number;
  toY: number;
  delay: number;
}

interface GameRoomPropsExtended extends GameRoomProps {
  socket: Socket | null;
  setCurrentPage: (page: Page, data?: Record<string, unknown>) => void;
  userData: UserData;
  pageData: PageData | null;
}

const useWindowSize = () => {
  const [size, setSize] = useState([typeof window !== 'undefined' ? window.innerWidth : 0, typeof window !== 'undefined' ? window.innerHeight : 0]);
  useEffect(() => {
    function updateSize() {
      setSize([window.innerWidth, window.innerHeight]);
    }
    window.addEventListener('resize', updateSize);
    updateSize(); // Initial size

    // Force a second update after a short delay to handle viewport transitions
    const timer = setTimeout(() => updateSize(), 100);

    return () => {
      window.removeEventListener('resize', updateSize);
      clearTimeout(timer);
    };
  }, []);
  return size;
};

const useTablePositioning = () => {
  const [windowWidth] = useWindowSize();
  const [tableSize] = useState({ width: 315, height: 493 });

  const scale = windowWidth > 0 ? (windowWidth * 0.85) / tableSize.width : 0;

  const getPositionClasses = (position: number, isShowdown: boolean): string => {
    const zIndex = isShowdown ? 'z-40' : 'z-30';
    const baseClasses = `absolute ${zIndex} transition-all duration-300 ease-in-out hover:scale-105 hover:z-40 w-20 h-24 flex items-center justify-center`;
    const positionClasses = {
      1: "-top-10 left-1/2",
      2: "top-1/4 -right-5",
      3: "bottom-1/4 -right-5",
      4: "-bottom-10 left-1/2",
      5: "bottom-1/4 -left-5",
      6: "top-1/4 -left-5",
    };
    return `${baseClasses} ${positionClasses[position as keyof typeof positionClasses] || ''}`;
  };

  const getPositionStyle = (position: number): React.CSSProperties => {
    let transform = `scale(${scale})`;
    if (position === 1 || position === 4) {
      transform += ' translateX(-50%)';
    }
    return { transform };
  };

  return { getPositionStyle, getPositionClasses, scale };
};

export function GameRoom({ roomId, balance, socket, setCurrentPage, userData, pageData }: GameRoomPropsExtended) {
  const { gameState, loading, error, isSeated, isProcessing, actions } = useGameState(roomId, socket);
  const [showBetSlider, setShowBetSlider] = useState(false);
  const [showMenuModal, setShowMenuModal] = useState(false);
  const [showChatMenu, setShowChatMenu] = useState(false);
  const [activeChats, setActiveChats] = useState<Record<string, { phrase: string; timerId: NodeJS.Timeout }>>({});
  const [notification, setNotification] = useState<NotificationType | null>(null);
  const { getPositionStyle, getPositionClasses, scale } = useTablePositioning();
  const [turnTimer, setTurnTimer] = useState(TURN_DURATION_SECONDS);
  const [svaraStep, setSvaraStep] = useState<'none' | 'animating' | 'joining'>('none');
  const { triggerImpact } = useHapticFeedback();
  const currentUserId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id?.toString() || '';
  const currentTurnRef = useRef<string>(''); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥

  useEffect(() => {
    if (gameState?.status === 'svara_pending' && svaraStep === 'none') {
      setSvaraStep('animating');
    } else if (gameState?.status !== 'svara_pending') {
      setSvaraStep('none');
    }
  }, [gameState?.status, svaraStep]);

  const handleLeaveRoom = useCallback(() => {
    setShowMenuModal(false);
    setShowBetSlider(false);
    if (actions) {
      actions.leaveRoom();
    }
    setCurrentPage('dashboard');
  }, [actions, setCurrentPage]);

  useAppBackButton(true, handleLeaveRoom);

  useEffect(() => {
    if (gameState && gameState.status === 'svara_pending' && (gameState.svaraParticipants?.includes(currentUserId) ?? false)) {
      // –ï—Å–ª–∏ —è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å - —è –Ω–µ –º–æ–≥—É –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–≤–∞—Ä—ã, —É—á–∞—Å—Ç–≤—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      actions.joinSvara();
    }
  }, [gameState, currentUserId, actions]);

  const [chipAnimations, setChipAnimations] = useState<Array<ChipAnimation>>([]);
  const [cardAnimations, setCardAnimations] = useState<Array<CardAnimation>>([]);
  const [winSoundPlayed, setWinSoundPlayed] = useState(false);
  const [isDealingCards, setIsDealingCards] = useState(false);
  const [showFinished, setShowFinished] = useState(false);
  const [showChipStack, setShowChipStack] = useState(true);
  const [isAnteAnimationBlocked, setIsAnteAnimationBlocked] = useState(false);
  const [isFoldAnimationBlocked, setIsFoldAnimationBlocked] = useState(false);
  const [actualGameState, setActualGameState] = useState<GameState | null>(null);
  const [savedChipCount, setSavedChipCount] = useState(0);
  
  // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å —É—á–µ—Ç–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–π
  const effectiveGameStatus = isAnteAnimationBlocked ? 'ante' : 
                             isFoldAnimationBlocked ? 'betting' : 
                             (gameState?.status || 'waiting');
  

  


  // Chat message handling
  useEffect(() => {
    if (!socket) return;

    const handleNewChatMessage = ({ playerId, phrase }: { playerId: string; phrase: string }) => {
      console.log('üó®Ô∏è Received new_chat_message:', { playerId, phrase, currentUserId });
      setActiveChats(prev => {
        // Clear previous timer for this player if it exists
        if (prev[playerId]) {
          clearTimeout(prev[playerId].timerId);
        }
        // Set new message and timer
        const timerId = setTimeout(() => {
          setActiveChats(currentChats => {
            const newChats = { ...currentChats };
            delete newChats[playerId];
            return newChats;
          });
        }, 2000);

        const newState = {
          ...prev,
          [playerId]: { phrase, timerId },
        };
        console.log('üó®Ô∏è Updated activeChats:', newState);
        return newState;
      });
    };

    socket.on('new_chat_message', handleNewChatMessage);

    return () => {
      socket.off('new_chat_message', handleNewChatMessage);
      // Clear all timers on cleanup
      setActiveChats(prev => {
        Object.values(prev).forEach(chat => clearTimeout(chat.timerId));
        return {};
      });
    };
  }, [socket]);

  const handleSelectPhrase = (phrase: string) => {
    if (socket) {
      console.log('üó®Ô∏è Sending chat_message:', { roomId, phrase, currentUserId });
      socket.emit('chat_message', { roomId, phrase });
      setShowChatMenu(false); // Close chat menu after sending
    }
  };

  const activeGamePhases: GameState['status'][] = ['blind_betting', 'betting'];
  const isCurrentUserTurn = !!(isSeated && gameState && activeGamePhases.includes(effectiveGameStatus) && gameState.players[gameState.currentPlayerIndex]?.id === currentUserId && !gameState.isAnimating && !isProcessing);

  useEffect(() => {
    const activeTurn = gameState && activeGamePhases.includes(effectiveGameStatus) && !gameState.isAnimating;
    const currentPlayerId = gameState?.players[gameState?.currentPlayerIndex]?.id;
    const turnKey = `${gameState?.status}-${currentPlayerId}-${gameState?.currentPlayerIndex}`;



    if (activeTurn) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ö–æ–¥
      if (turnKey !== currentTurnRef.current) {
        console.log('‚è∞ New turn detected, resetting timer to:', TURN_DURATION_SECONDS, 'seconds');
        currentTurnRef.current = turnKey;
        setTurnTimer(TURN_DURATION_SECONDS);
      } else {
        console.log('‚è∞ Same turn, keeping timer at:', turnTimer, 'seconds');
      }
      
      const interval = setInterval(() => {
        setTurnTimer((prev) => {
          if (prev <= 1) {
            clearInterval(interval);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
      return () => clearInterval(interval);
    } else {
      setTurnTimer(TURN_DURATION_SECONDS);
    }
  }, [gameState?.status, gameState?.currentPlayerIndex, gameState?.isAnimating, isCurrentUserTurn, currentUserId]);

  // Separate effect for auto-fold when timer reaches 0
  useEffect(() => {
    if (turnTimer === 0 && isCurrentUserTurn) {
      actions.fold();
    }
  }, [turnTimer, isCurrentUserTurn, actions]);

  useEffect(() => {
    if (isCurrentUserTurn) {
      triggerImpact('medium');
      actions.playSound('turn');
    }
  }, [isCurrentUserTurn, triggerImpact, actions]);

  // Track fold actions for all players and play fold sound
  useEffect(() => {
    if (!gameState?.log) return;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    const lastAction = gameState.log[gameState.log.length - 1];

    
    if (lastAction && lastAction.type === 'fold') {
      console.log('üéµ Fold action detected, playing sound:', lastAction);
      actions.playSound('fold');
    }
  }, [gameState?.log, actions]);

  // Track other player actions for animations (only when log length changes)
  const prevLogLengthRef = useRef(0);
  const lastProcessedActionRef = useRef<string>('');
  
  useEffect(() => {
    if (!gameState?.log) return;
    
    const currentLogLength = gameState.log.length;
    if (currentLogLength > prevLogLengthRef.current) {
      // –ù–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥
      const lastAction = gameState.log[currentLogLength - 1];
      console.log('üÉè New action in log:', lastAction);
      
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
      const actionKey = `${lastAction.telegramId}-${lastAction.type}-${Date.now()}`;
      
      if (lastAction && 
          lastAction.telegramId !== currentUserId && 
          ['blind_bet', 'call', 'raise', 'ante'].includes(lastAction.type) &&
          actionKey !== lastProcessedActionRef.current) {
        lastProcessedActionRef.current = actionKey;
        handleOtherPlayerAction(lastAction.telegramId);
      }
      
      // –ê–Ω–∏–º–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç –ø—Ä–∏ fold
      if (lastAction && lastAction.type === 'fold') {
        setIsFoldAnimationBlocked(true); // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ finished
        handleFoldCards(lastAction.telegramId);
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (–≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç)
        setTimeout(() => {
          console.log('üîÑ Fold animation completed - unblocking finished state');
          setIsFoldAnimationBlocked(false);
        }, 2000);
      }
      
      // –ê–Ω–∏–º–∞—Ü–∏—è —Ñ–∏—à–µ–∫ –¥–ª—è ante –¥–µ–π—Å—Ç–≤–∏–π
      if (lastAction && lastAction.type === 'ante') {
        handlePlayerBet(lastAction.telegramId);
      }
      
      // –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–∑—ã ante (–∫–æ–≥–¥–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ ante)
      if (gameState.status === 'ante' && !isDealingCards) {
        const anteActions = gameState.log.filter(action => action.type === 'ante');
        const activePlayers = gameState.players.filter(player => player.isActive);
        
        if (anteActions.length >= activePlayers.length) {
          setIsDealingCards(true);
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ante –∞–Ω–∏–º–∞—Ü–∏–π –ø–µ—Ä–µ–¥ —Ä–∞–∑–¥–∞—á–µ–π –∫–∞—Ä—Ç
          setTimeout(() => {
            handleDealCards();
          }, 1500); // 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö ante –∞–Ω–∏–º–∞—Ü–∏–π
        }
      }
    }
    
    prevLogLengthRef.current = currentLogLength;
  }, [gameState?.log?.length, currentUserId, gameState?.status, isDealingCards]); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç –ø—Ä–∏ fold
  const handleFoldCards = (playerId: string) => {
    if (!gameState) return;
    
    const player = gameState.players.find(p => p.id === playerId);
    if (!player) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç –¥–∞–∂–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–±—Ä–æ—Å–∏–ª–∏)
    if (!player.isActive && !player.hasFolded) return;
    
    const centerX = window.innerWidth / 2;
    const centerY = window.innerHeight / 2;
    const tableWidth = 315 * scale;
    const tableHeight = 493 * scale;
    const verticalOffset = 100;
    
    const isCurrentPlayer = player.id === currentUserId;
    const relativePosition = isCurrentPlayer ? 4 : getScreenPosition(player.position);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    let playerX = 0;
    let playerY = 0;
    
    switch (relativePosition) {
      case 1: playerX = centerX; playerY = centerY - tableHeight * 0.4 - verticalOffset; break;
      case 2: playerX = centerX + tableWidth * 0.4; playerY = centerY - tableHeight * 0.25; break;
      case 3: playerX = centerX + tableWidth * 0.4; playerY = centerY + tableHeight * 0.25 - verticalOffset; break;
      case 4: playerX = centerX; playerY = centerY + tableHeight * 0.4 - verticalOffset; break;
      case 5: playerX = centerX - tableWidth * 0.4; playerY = centerY + tableHeight * 0.25 - verticalOffset; break;
      case 6: playerX = centerX - tableWidth * 0.4; playerY = centerY - tableHeight * 0.25; break;
    }
    
    // –°–æ–∑–¥–∞–µ–º 3 –∫–∞—Ä—Ç—ã –¥–ª—è —Å–±—Ä–æ—Å–∞
    for (let cardIndex = 0; cardIndex < 3; cardIndex++) {
      const cardId = `fold-${playerId}-${cardIndex}-${Date.now()}`;
      setCardAnimations(prev => [...prev, {
        id: cardId,
        fromX: playerX,
        fromY: playerY,
        toX: centerX,
        toY: centerY,
        delay: cardIndex * 100 // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
      }]);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–∏—à–µ–∫ –∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
  const handleChipsToWinner = () => {
    console.log('üéØ WINNER: handleChipsToWinner called, savedChipCount:', savedChipCount, 'gameState.pot:', gameState?.pot);
    if (!gameState?.winners || gameState.winners.length === 0) {
      console.log('üéØ WINNER: No winners found');
      return;
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á—å—è - –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é (—Ñ–∏—à–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–∞–Ω–∫–µ)
    if (gameState.winners.length > 1) {
      console.log('üéØ WINNER: Multiple winners (tie) - chips stay in pot');
      return;
    }
    
    console.log('üéØ WINNER: Single winner found:', gameState.winners[0]);
    
    const winner = gameState.winners[0];
    const winnerPlayer = gameState.players.find(p => p.id === winner.id);
    
    if (!winnerPlayer) {
      return;
    }
    
    const centerX = window.innerWidth / 2;
    const centerY = window.innerHeight / 2;
    const tableWidth = 315 * scale;
    const tableHeight = 493 * scale;
    const verticalOffset = 100;
    
    const isCurrentPlayer = winnerPlayer.id === currentUserId;
    const relativePosition = isCurrentPlayer ? 4 : getScreenPosition(winnerPlayer.position);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    let winnerX = 0;
    let winnerY = 0;
    
    switch (relativePosition) {
      case 1: winnerX = centerX; winnerY = centerY - tableHeight * 0.4 - verticalOffset; break;
      case 2: winnerX = centerX + tableWidth * 0.4; winnerY = centerY - tableHeight * 0.25; break;
      case 3: winnerX = centerX + tableWidth * 0.4; winnerY = centerY + tableHeight * 0.25 - verticalOffset; break;
      case 4: winnerX = centerX; winnerY = centerY + tableHeight * 0.4 - verticalOffset; break;
      case 5: winnerX = centerX - tableWidth * 0.4; winnerY = centerY + tableHeight * 0.25 - verticalOffset; break;
      case 6: winnerX = centerX - tableWidth * 0.4; winnerY = centerY - tableHeight * 0.25; break;
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –≤ –±–∞–Ω–∫–µ
    const chipCount = gameState.log.filter(action => 
      action.type === 'ante' || 
      action.type === 'blind_bet' || 
      action.type === 'call' || 
      action.type === 'raise'
    ).length;
    
    console.log('üéØ Creating', chipCount, 'chip animations to winner at position:', relativePosition);
    console.log('üéØ Winner coordinates:', winnerX, winnerY);
    
    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–∏—à–∫–∏
    for (let i = 0; i < chipCount; i++) {
      const chipId = `winner-chip-${Date.now()}-${i}`;
      console.log('üéØ Adding winner chip animation:', chipId);
      setChipAnimations(prev => [...prev, {
        id: chipId,
        fromX: centerX,
        fromY: centerY,
        toX: winnerX,
        toY: winnerY,
        delay: i * 50 // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ñ–∏—à–∫–∞–º–∏
      }]);
    }
  };

  // Play win sound for current user if they won (after finished state is shown)
  useEffect(() => {
    if (!gameState?.winners || !showFinished) {
      // Reset flags when game is not finished or not showing finished
      if (!showFinished) {
        setWinSoundPlayed(false);
      }

      return;
    }
    
    const currentUserWon = gameState.winners.some(winner => winner.id === currentUserId);
    if (currentUserWon && !winSoundPlayed) {
      // Play win sound immediately when finished state is shown
      const winSoundTimer = setTimeout(() => {
        actions.playSound('win');
        setWinSoundPlayed(true);
      }, 100);
      
      return () => clearTimeout(winSoundTimer);
    }
  }, [gameState?.winners, showFinished, currentUserId, actions, winSoundPlayed]);




  const handleChipAnimationComplete = useCallback((chipId: string) => {
    console.log('üéØ Chip animation completed:', chipId);
    setChipAnimations(prev => {
      const newAnimations = prev.filter(chip => chip.id !== chipId);
      console.log('üéØ Remaining chip animations:', newAnimations.length);
      
      // –°–∫—Ä—ã–≤–∞–µ–º ChipStack —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–∏—à–µ–∫ –∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
      const remainingWinnerChips = newAnimations.filter(chip => chip.id.startsWith('winner-chip-'));
      const hasWinnerChips = prev.some(chip => chip.id.startsWith('winner-chip-'));
      
      if (hasWinnerChips && remainingWinnerChips.length === 0) {
        console.log('üéØ All winner chip animations completed - hiding ChipStack');
        setTimeout(() => {
          setShowChipStack(false);
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º
      }
      
      return newAnimations;
    });
  }, []);

  const handleCardAnimationComplete = useCallback((cardId: string) => {
    console.log('üÉè Card animation completed:', cardId);
    setCardAnimations(prev => {
      const newAnimations = prev.filter(card => card.id !== cardId);
      console.log('üÉè Remaining card animations:', newAnimations.length);
      return newAnimations;
    });
  }, []);

  // –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ante –∞–Ω–∏–º–∞—Ü–∏–π
  useEffect(() => {
    if (!gameState) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    setActualGameState(gameState);
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ blind_betting –∏–∑ ante, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è ante –∞–Ω–∏–º–∞—Ü–∏–π
    if (gameState.status === 'blind_betting' && 
        (prevGameStatusRef.current === 'ante' || prevGameStatusRef.current === 'waiting') && 
        !isAnteAnimationBlocked) {
      console.log('üéØ Ante animation blocked - starting card deal');
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∏ –æ—Å—Ç–∞–µ–º—Å—è –≤ ante –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
      setIsAnteAnimationBlocked(true);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–∞—á—É –∫–∞—Ä—Ç –ø–æ—Å–ª–µ ante chip –∞–Ω–∏–º–∞—Ü–∏–π
      if (!isDealingCards) {
        console.log('üéØ Setting isDealingCards to true');
        setIsDealingCards(true);
        setTimeout(() => {
          console.log('üéØ Calling handleDealCards');
          handleDealCards();
        }, 1500); // –°–Ω–∞—á–∞–ª–∞ ante chip –∞–Ω–∏–º–∞—Ü–∏–∏
      } else {
        console.log('üéØ Cards already being dealt, skipping');
      }
      
      setTimeout(() => {
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ blind_betting
        console.log('üéØ Unblocking ante animation');
        setIsAnteAnimationBlocked(false);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
        setIsDealingCards(false);
      }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ante –∞–Ω–∏–º–∞—Ü–∏–π
      
      return;
    }
    
          // –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (!isAnteAnimationBlocked) {
        prevGameStatusRef.current = gameState.status;
      }
      
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º prevStatus –∫–æ–≥–¥–∞ fold –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã useEffect —Å—Ä–∞–±–æ—Ç–∞–ª —Å–Ω–æ–≤–∞
      if (prevGameStatusRef.current === 'finished' && !isFoldAnimationBlocked) {
        console.log('üîÑ Resetting prevStatus from finished to empty for re-trigger');
        prevGameStatusRef.current = '';
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏—à–µ–∫ –ø–æ—Å–ª–µ fold –∞–Ω–∏–º–∞—Ü–∏–∏
        const chipCount = gameState?.pot || 0;
        setSavedChipCount(chipCount);
        console.log('üéØ FORCED: Saved chip count after fold:', chipCount, 'pot:', gameState?.pot);
        setShowChipStack(true);
        
        setTimeout(() => {
          setShowFinished(true);
          setTimeout(() => {
            handleChipsToWinner();
          }, 2000);
        }, 1500);
      }
    }, [gameState?.status, isDealingCards, isAnteAnimationBlocked, isFoldAnimationBlocked]);

  // –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–∑—ã ante –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–æ–º finished
  const prevGameStatusRef = useRef<string>('');
  
  useEffect(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ante
    const currentGameState = isAnteAnimationBlocked ? 
      { ...actualGameState!, status: 'ante' as const } : gameState;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ChipStack –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏—à–∫–∏ –≤ –±–∞–Ω–∫–µ
    if (gameState?.pot && gameState.pot > 0 && !showChipStack && gameState?.status !== 'finished') {
      console.log('üîÑ Forcing ChipStack visibility - pot:', gameState.pot);
      setShowChipStack(true);
    }
    
    console.log('üîÑ useEffect triggered:', {
      currentGameState: currentGameState?.status,
      prevStatus: prevGameStatusRef.current,
      isAnteAnimationBlocked,
      isFoldAnimationBlocked,
      gameStateStatus: gameState?.status,
      pot: gameState?.pot,
      showChipStack
    });
    
    if (currentGameState?.status && prevGameStatusRef.current !== currentGameState.status) {
      
            // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ finished - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç
      if (currentGameState.status === 'finished' && !isFoldAnimationBlocked) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω–∫–∞
        const chipCount = gameState?.pot || 0;
        setSavedChipCount(chipCount);
        console.log('üéØ FINISHED: Saved chip count:', chipCount, 'showChipStack:', showChipStack, 'pot:', gameState?.pot);
        // –û—Å—Ç–∞–≤–ª—è–µ–º ChipStack –≤–∏–¥–∏–º—ã–º –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–∏—à–µ–∫ –∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        setShowChipStack(true);
        setTimeout(() => {
          setShowFinished(true);
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–∏—à–µ–∫ –∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ finished
          setTimeout(() => {
            handleChipsToWinner();
          }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ finished –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–∏—à–µ–∫ –∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        }, 1500); // 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç
      } else if (currentGameState.status === 'finished' && isFoldAnimationBlocked) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω–∫–∞
        const chipCount = gameState?.pot || 0;
        setSavedChipCount(chipCount);
        console.log('üéØ FINISHED (fold blocked): Saved chip count:', chipCount, 'showChipStack:', showChipStack, 'pot:', gameState?.pot);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º finished –ø–æ–∫–∞ –∏–¥–µ—Ç fold –∞–Ω–∏–º–∞—Ü–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º ChipStack
        setShowChipStack(true);
      } else {
        setShowFinished(false);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ waiting (–Ω–æ–≤–∞—è –∏–≥—Ä–∞)
        if (currentGameState.status === 'waiting') {
          console.log('üîÑ Game reset to waiting - resetting all flags');
          setShowChipStack(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ChipStack –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
          setIsDealingCards(false);
          setIsAnteAnimationBlocked(false); // –í–∞–∂–Ω–æ: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É ante
          setIsFoldAnimationBlocked(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É fold
          setSavedChipCount(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫
        }
      }
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç waiting –∫ ante - –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ —Ä–∞–∑–¥–∞—á–µ –∫–∞—Ä—Ç
      if (prevGameStatusRef.current === 'waiting' && currentGameState.status === 'ante') {
        console.log('üîÑ New game started - resetting flags');
        setShowChipStack(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ChipStack –≤ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        setIsDealingCards(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç
        setIsAnteAnimationBlocked(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        setIsFoldAnimationBlocked(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É fold
      }
      // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç ante –∫ blind_betting –∏ –Ω–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ - –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–∞—á—É –∑–¥–µ—Å—å (–æ–Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ)
      else if (prevGameStatusRef.current === 'ante' && currentGameState.status === 'blind_betting' && !isAnteAnimationBlocked) {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - —Ä–∞–∑–¥–∞—á–∞ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —á–µ—Ä–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      }
      // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç waiting –∫ blind_betting (–ø—Ä–æ–ø—É—â–µ–Ω ante) - –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–∞—á—É –∫–∞—Ä—Ç
      else if (prevGameStatusRef.current === 'waiting' && currentGameState.status === 'blind_betting') {
        if (!isDealingCards && !isAnteAnimationBlocked) {
          console.log('üéØ Direct waiting -> blind_betting transition - starting card deal');
          setIsDealingCards(true);
          handleDealCards();
        } else {
          console.log('üéØ Skipping direct card deal - already handled by ante block');
        }
      }
      
      prevGameStatusRef.current = currentGameState.status;
    }
  }, [gameState?.status]);

  useEffect(() => {
    if (pageData?.autoSit && !isSeated && gameState) {
      const seatedPositions = gameState.players.map(p => p.position);
      let positionToSit = 1;
      while(seatedPositions.includes(positionToSit)) {
        positionToSit++;
      }
      if (positionToSit <= 6) {
        actions.sitDown(positionToSit, userData);
      }
    }
  }, [pageData, isSeated, gameState, actions, userData]);

  if (loading) return <LoadingPage isLoading={loading} />;

  if (error) {
    return (
      <div className="bg-primary min-h-screen flex flex-col items-center justify-center">
        <div className="text-red-500 text-xl">–û—à–∏–±–∫–∞: {error}</div>
      </div>
    );
  }

  if (!gameState) {
    return (
      <div className="bg-primary min-h-screen flex flex-col items-center justify-center">
        <div className="text-red-500 text-xl">–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã</div>
      </div>
    );
  }

  const currentPlayer = gameState.players.find(p => p.id === currentUserId);
  const currentUserPosition = currentPlayer?.position;

  const getScreenPosition = (absolutePosition: number) => {
    if (!currentUserPosition || !isSeated) {
      return absolutePosition;
    }
    const offset = 4 - currentUserPosition;
    return ((absolutePosition + offset - 1 + 6) % 6) + 1;
  };
  
  const callAmount = gameState.lastActionAmount;
  const isAnimating = !!(gameState.isAnimating);
  const postLookActions = isCurrentUserTurn && !!currentPlayer?.hasLookedAndMustAct;
  const postLookCallAmount = gameState.lastBlindBet > 0 ? gameState.lastBlindBet * 2 : gameState.minBet;
    
  const minRaiseAmount = (() => {
    if (postLookActions) {
      return gameState.lastBlindBet > 0
        ? gameState.lastBlindBet * 2
        : gameState.minBet;
    }
    return gameState.lastActionAmount * 2;
  })();

  const maxRaise = currentPlayer?.balance || 0;
  const blindBetAmount = gameState.lastBlindBet > 0 ? gameState.lastBlindBet * 2 : gameState.minBet;
  
  const canPerformBettingActions = !!(isCurrentUserTurn && effectiveGameStatus === 'betting' && !isAnimating && !postLookActions);
  const canPerformBlindActions = !!(isCurrentUserTurn && effectiveGameStatus === 'blind_betting' && !isAnimating && !postLookActions);

  const canFold = canPerformBettingActions || postLookActions;
  const canCall = canPerformBettingActions || postLookActions;
  const canRaise = canPerformBettingActions || postLookActions;
  const canLook = canPerformBlindActions;
  const canBlindBet = canPerformBlindActions;

  const isCallDisabled = !!(effectiveGameStatus === 'betting' || effectiveGameStatus === 'blind_betting'
    ? false
    : (currentPlayer?.currentBet ?? 0) >= gameState.currentBet);
  const isRaiseDisabled = !!((currentPlayer?.balance || 0) < minRaiseAmount);
  const isBlindBetDisabled = !!((currentPlayer?.balance || 0) < blindBetAmount);
  
  const blindButtonsDisabled = !!(effectiveGameStatus !== 'blind_betting');
  
  const showCards = !!(effectiveGameStatus === 'showdown' || (effectiveGameStatus === 'finished' && showFinished) || gameState.showWinnerAnimation);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
  const handleOtherPlayerAction = (playerId: string) => {
    handlePlayerBet(playerId);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Å—Ç–æ–ª–∞ –∫ –∏–≥—Ä–æ–∫–∞–º
  const handleDealCards = () => {
    console.log('üÉè handleDealCards called');
    
    const centerX = window.innerWidth / 2;
    const centerY = window.innerHeight / 2;
    const tableWidth = 315 * scale;
    const tableHeight = 493 * scale;
    const verticalOffset = 100;
    
    // –†–∞–∑–¥–∞–µ–º –ø–æ 3 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
    gameState.players.forEach((player, playerIndex) => {
      if (!player.isActive) return;
      
      const isCurrentPlayer = player.id === currentUserId;
      const relativePosition = isCurrentPlayer ? 4 : getScreenPosition(player.position);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
      let playerX = 0;
      let playerY = 0;
      
      switch (relativePosition) {
        case 1: playerX = centerX; playerY = centerY - tableHeight * 0.4 - verticalOffset; break;
        case 2: playerX = centerX + tableWidth * 0.4; playerY = centerY - tableHeight * 0.25; break;
        case 3: playerX = centerX + tableWidth * 0.4; playerY = centerY + tableHeight * 0.25 - verticalOffset; break;
        case 4: playerX = centerX; playerY = centerY + tableHeight * 0.4 - verticalOffset; break;
        case 5: playerX = centerX - tableWidth * 0.4; playerY = centerY + tableHeight * 0.25 - verticalOffset; break;
        case 6: playerX = centerX - tableWidth * 0.4; playerY = centerY - tableHeight * 0.25; break;
      }
      
      // –°–æ–∑–¥–∞–µ–º 3 –∫–∞—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      for (let cardIndex = 0; cardIndex < 3; cardIndex++) {
        const cardId = `deal-${player.id}-${cardIndex}-${Date.now()}`;
        setCardAnimations(prev => [...prev, {
          id: cardId,
          fromX: centerX,
          fromY: centerY,
          toX: playerX,
          toY: playerY,
          delay: (playerIndex * 3 + cardIndex) * 200 // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏
        }]);
      }
    });
  };

  const handlePlayerBet = (playerId: string) => {
    const player = gameState.players.find(p => p.id === playerId);
    if (!player || !player.isActive) {
      console.log('‚ùå Cannot create chip animation: player not found or not active:', playerId);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const existingAnimation = chipAnimations.find(chip => chip.id.includes(playerId));
    if (existingAnimation) {
      console.log('üéØ Skipping chip animation - already exists for player:', playerId);
      return;
    }
    
    const absolutePosition = player.position;
    const isCurrentPlayer = player.id === currentUserId;
    // –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –í–°–ï–ì–î–ê –≤ –ø–æ–∑–∏—Ü–∏–∏ 4 (—Å–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É), –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è —á–µ—Ä–µ–∑ getScreenPosition
    const relativePosition = isCurrentPlayer ? 4 : getScreenPosition(absolutePosition);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ CSS –∫–ª–∞—Å—Å–æ–≤ –ø–æ–∑–∏—Ü–∏–π PlayerSpot
    let playerX = 0;
    let playerY = 0;
    
    // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–∞–Ω–∫)
    const centerX = window.innerWidth / 2;
    const centerY = window.innerHeight / 2;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ CSS –∫–ª–∞—Å—Å–æ–≤ –∏–∑ getPositionClasses
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º PlayerSpot
    const tableWidth = 315 * scale; // –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–∞
    const tableHeight = 493 * scale; // –í—ã—Å–æ—Ç–∞ —Å—Ç–æ–ª–∞
    const verticalOffset = 100; // –°–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    
    switch (relativePosition) {
      case 1: // -top-10 left-1/2 (–≤–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä)
        playerX = centerX;
        playerY = centerY - tableHeight * 0.4 - verticalOffset; // –ü–æ–¥–Ω–∏–º–∞–µ–º –≤—ã—à–µ
        break;
      case 2: // top-1/4 -right-5 (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π)
        playerX = centerX + tableWidth * 0.4;
        playerY = centerY - tableHeight * 0.25; // –ü–æ–¥–Ω–∏–º–∞–µ–º –≤—ã—à–µ
        break;
      case 3: // bottom-1/4 -right-5 (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π)
        playerX = centerX + tableWidth * 0.4;
        playerY = centerY + tableHeight * 0.25 - verticalOffset; // –ü–æ–¥–Ω–∏–º–∞–µ–º –≤—ã—à–µ
        break;
      case 4: // -bottom-10 left-1/2 (–Ω–∏–∂–Ω–∏–π —Ü–µ–Ω—Ç—Ä) - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        playerX = centerX;
        playerY = centerY + tableHeight * 0.4 - verticalOffset; // –ü–æ–¥–Ω–∏–º–∞–µ–º –≤—ã—à–µ
        break;
      case 5: // bottom-1/4 -left-5 (–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π)
        playerX = centerX - tableWidth * 0.4;
        playerY = centerY + tableHeight * 0.25 - verticalOffset; // –ü–æ–¥–Ω–∏–º–∞–µ–º –≤—ã—à–µ
        break;
      case 6: // top-1/4 -left-5 (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π)
        playerX = centerX - tableWidth * 0.4;
        playerY = centerY - tableHeight * 0.25; // –ü–æ–¥–Ω–∏–º–∞–µ–º –≤—ã—à–µ
        break;
    }
    
    const chipId = `chip-${Date.now()}-${Math.random()}`;
    
    console.log('üéØ Chip animation coordinates:', {
      playerId,
      relativePosition,
      isCurrentPlayer,
      absolutePosition,
      playerX,
      playerY,
      centerX,
      centerY
    });
    
    console.log('üéØ Creating chip animation for player:', playerId, 'at position:', relativePosition);
    setChipAnimations(prev => [...prev, { 
      id: chipId, 
      fromX: playerX, 
      fromY: playerY, 
      toX: centerX, 
      toY: centerY, 
      delay: 0 
    }]);
  };

  const handleRaiseClick = () => setShowBetSlider(true);
  const handleBlindBetClick = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ —ç—Ç–æ –µ–≥–æ —Ö–æ–¥
    if (!currentPlayer || !currentPlayer.isActive || !isCurrentUserTurn) {
      console.log('‚ùå Cannot perform blind bet: player not active or not turn');
      return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–∏—à–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    handlePlayerBet(currentPlayer.id);
    actions.blindBet(blindBetAmount);
  };
  const handleBetConfirm = (amount: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ —ç—Ç–æ –µ–≥–æ —Ö–æ–¥
    if (!currentPlayer || !currentPlayer.isActive || !isCurrentUserTurn) {
      console.log('‚ùå Cannot perform raise: player not active or not turn');
      return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–∏—à–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    handlePlayerBet(currentPlayer.id);
    actions.raise(amount);
    setShowBetSlider(false);
  };

  const handleCallClick = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ —ç—Ç–æ –µ–≥–æ —Ö–æ–¥
    if (!currentPlayer || !currentPlayer.isActive || !isCurrentUserTurn) {
      console.log('‚ùå Cannot perform call: player not active or not turn');
      return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–∏—à–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    handlePlayerBet(currentPlayer.id);
    actions.call();
  };
  const handleSitDown = (position: number) => {
    if (parseFloat(balance) < gameState.minBet * 10) {
      setNotification('insufficientBalance');
      return;
    }
    actions.sitDown(position, userData);
  };

  return (
    <div style={{ backgroundImage: `url(${backgroundImage})`, backgroundSize: 'cover', backgroundPosition: 'center', minHeight: '100vh' }} className="flex flex-col relative">
      {/* –ó–∞—Ç–µ–º–Ω—è—é—â–∏–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è —Ñ–∞–∑—ã –≤—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç */}
      {showCards && <div className="fixed inset-0 bg-black bg-opacity-60 z-20 transition-opacity duration-500" />}

      {svaraStep === 'animating' && <SvaraAnimation onAnimationComplete={() => setSvaraStep('joining')} />}
      
      {svaraStep === 'joining' && !(gameState.svaraParticipants?.includes(currentUserId) ?? false) && (
        <SvaraJoinPopup 
          gameState={gameState}
          userData={userData}
          actions={actions}
        />
      )}

      <div className="relative z-30 text-white p-4 flex justify-between items-center">
        <h2 className="text-xs font-semibold">–ö–æ–º–Ω–∞—Ç–∞ ‚Ññ{roomId.slice(0, 8)}</h2>
        <div className="flex items-center space-x-3">
          <button onClick={() => setShowMenuModal(true)} className="transition-all duration-200 ease-in-out hover:opacity-75">
            <img src={menuIcon} alt="–ú–µ–Ω—é" className="w-5 h-5" />
          </button>
        </div>
      </div>
      
      <div className="flex-grow relative p-4">
        <div className="relative flex justify-center items-center min-h-[70vh] w-full p-4 sm:p-5 lg:p-6 game-table-container -mt-8">
          <div className="relative flex justify-center items-center w-full h-full">
            <div className="flex-shrink-0 relative z-10">
              <GameTable 
                gameState={gameState} 
                currentUserId={currentUserId} 
                showCards={showCards} 
                onSitDown={handleSitDown} 
                onInvite={actions.invitePlayer} 
                onChatOpen={() => setShowChatMenu(true)}
                maxPlayers={6} 
                scale={scale}
                showChipStack={showChipStack}
                savedChipCount={savedChipCount}
              />
            </div>
            
            {
              Array.from({ length: 6 }).map((_, index) => {
                const absolutePosition = index + 1;
                const screenPosition = getScreenPosition(absolutePosition);
                const player = gameState.players.find(p => p.position === absolutePosition);
                const positionStyle = getPositionStyle(screenPosition);
                const positionClasses = getPositionClasses(screenPosition, showCards);

                const cardSide = (screenPosition === 2 || screenPosition === 3) ? 'left' : 'right';
                
                const getOpenCardsPosition = (position: number) => {
                  switch (position) {
                    case 1: return 'bottom';
                    case 2: return 'left';
                    case 3: return 'left';
                    case 4: return 'top';
                    case 5: return 'right';
                    case 6: return 'right';
                    default: return 'top';
                  }
                };
                
                const openCardsPosition = getOpenCardsPosition(screenPosition);
                const isTurn = !!(gameState && player && gameState.players[gameState.currentPlayerIndex]?.id === player.id);
                const chatPhrase = player ? activeChats[player.id]?.phrase : undefined;

                return (
                  <div key={absolutePosition} style={positionStyle} className={positionClasses}>
                    {player ? (
                      (() => {
                        const isCurrentUser = userData && userData.id && player.id.toString() === userData.id.toString();
                        const isWinner = gameState.winners && gameState.winners.some(winner => winner.id === player.id);
                        // const winAction = gameState.log.find(action => action.type === 'win' && action.telegramId === player.id);
                        // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–Ω–∫ –º–∏–Ω—É—Å 5% –Ω–∞–ª–æ–≥
                        const winAmount = isWinner && gameState.pot > 0 ? Number((gameState.pot * 0.95).toFixed(2)) : 0;
                        
                        if (isCurrentUser) {
                          const mergedPlayer = { ...player, username: userData.username || userData.first_name || player.username, avatar: userData.photo_url || player.avatar };
                          return <PlayerSpot 
                            player={mergedPlayer} 
                            isCurrentUser={true} 
                            showCards={showCards} 
                            scale={scale} 
                            cardSide={cardSide} 
                            openCardsPosition={openCardsPosition}
                            isTurn={isTurn} 
                            turnTimer={turnTimer}
                            isWinner={isWinner}
                            winAmount={winAmount}
                            gameStatus={effectiveGameStatus}
                            chatPhrase={chatPhrase}
                            onPlayerBet={undefined}
                            gameState={gameState}
                          />;
                        }
                        return <PlayerSpot 
                          player={player} 
                          isCurrentUser={false} 
                          showCards={showCards} 
                          scale={scale} 
                          cardSide={cardSide} 
                          openCardsPosition={openCardsPosition}
                          isTurn={isTurn}
                          turnTimer={turnTimer}
                          isWinner={isWinner}
                          winAmount={winAmount}
                          gameStatus={effectiveGameStatus}
                          chatPhrase={chatPhrase}
                          onPlayerBet={undefined}
                          gameState={gameState}
                        />;
                      })()
                    ) : (
                      <SeatButton type={isSeated ? 'invite' : 'sitdown'} position={absolutePosition} onSitDown={handleSitDown} onInvite={() => {}} scale={scale} />
                    )}
                  </div>
                )
              })
            }
          </div>
        </div>
      </div>
      
      {isSeated && (
        <div className="p-4">
          <div className="flex flex-col items-center space-y-4">
            <div>
              {effectiveGameStatus === 'waiting' ? (
                <div className="p-4 flex items-center justify-center h-full">
                  <p className="text-white font-bold text-[10px] leading-[150%] tracking-[-0.011em] text-center">–ñ–¥–µ–º –∏–≥—Ä–æ–∫–æ–≤</p>
                </div>
                              ) : isCurrentUserTurn ? (
                <ActionButtons 
                  postLookActions={postLookActions}
                  canFold={canFold}
                  canCall={canCall}
                  canRaise={canRaise}
                  canLook={canLook}
                  canBlindBet={canBlindBet}
                  callAmount={postLookActions ? postLookCallAmount : callAmount}
                  turnTimer={turnTimer}
                  onFold={actions.fold}
                  onCall={handleCallClick}
                  onRaise={handleRaiseClick}
                  onLook={actions.lookCards}
                  onBlindBet={handleBlindBetClick}
                  blindButtonsDisabled={blindButtonsDisabled || isProcessing}
                  isCallDisabled={isCallDisabled || isProcessing}
                  isRaiseDisabled={isRaiseDisabled || isProcessing}
                  isBlindBetDisabled={isBlindBetDisabled || isProcessing}
                  minBet={effectiveGameStatus === 'blind_betting' ? blindBetAmount : minRaiseAmount}
                />
              ) : (
                <div className="p-4 flex items-center justify-center h-full">
                  <p className="text-white font-bold text-[10px] leading-[150%] tracking-[-0.011em] text-center">–í –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞</p>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
      
      <BetSlider isOpen={showBetSlider} onClose={() => setShowBetSlider(false)} minBet={minRaiseAmount} maxBet={maxRaise} initialBet={minRaiseAmount} onConfirm={handleBetConfirm} isTurn={isCurrentUserTurn} turnTimer={turnTimer} isProcessing={isProcessing} />
      
      <GameMenu isOpen={showMenuModal} onClose={() => setShowMenuModal(false)} onExit={handleLeaveRoom} />

      <ChatMenu isOpen={showChatMenu} onClose={() => setShowChatMenu(false)} onSelectPhrase={handleSelectPhrase} />

      {isSeated && (
        <button 
          onClick={() => setShowChatMenu(true)}
          className="fixed z-40"
          style={{ 
            width: '35px', 
            height: '35px',
            bottom: '25%',
            left: '18px'
          }}
        >
          <img src={chatButton} alt="Chat" className="w-full h-full" />
        </button>
      )}

      {notification && <Notification type={notification} onClose={() => setNotification(null)} />}
      
      <div className="fixed inset-0 pointer-events-none" style={{ zIndex: 1000 }}>
        {chipAnimations.map(chip => (
          <FlyingChip
            key={chip.id}
            chipId={chip.id}
            fromX={chip.fromX}
            fromY={chip.fromY}
            toX={chip.toX}
            toY={chip.toY}
            delay={chip.delay}
            onComplete={handleChipAnimationComplete}
          />
        ))}
        {cardAnimations.map(card => (
          <FlyingCard
            key={card.id}
            cardId={card.id}
            fromX={card.fromX}
            fromY={card.fromY}
            toX={card.toX}
            toY={card.toY}
            delay={card.delay}
            onComplete={handleCardAnimationComplete}
          />
        ))}
      </div>
    </div>
  );
}