import { Injectable } from '@nestjs/common';
import { GameState, GameAction } from '../../../types/game';
import { CardService } from './card.service';
import { PlayerService } from './player.service';

@Injectable()
export class GameStateService {
  constructor(
    private readonly cardService: CardService,
    private readonly playerService: PlayerService,
  ) {}

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  createInitialGameState(roomId: string, minBet: number): GameState {
    return {
      roomId,
      status: 'waiting',
      players: [],
      deck: [],
      pot: 0.0,
      currentPlayerIndex: 0,
      dealerIndex: 0,
      minBet,
      currentBet: 0,
      lastBlindBet: 0,
      lastActionAmount: 0, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      rake: 0,
      winners: [],
      isSvara: false,
      round: 0,
      log: [],
    };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  initializeNewGame(
    gameState: GameState,
    previousWinnerId?: string,
  ): {
    updatedGameState: GameState;
    actions: GameAction[];
  } {
    const updatedGameState = { ...gameState };
    const actions: GameAction[] = [];

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    updatedGameState.status = 'ante';
    updatedGameState.round += 1;
    updatedGameState.currentBet = 0;
    updatedGameState.lastBlindBet = 0;
    updatedGameState.lastBlindBettorIndex = undefined;
    updatedGameState.lastActionAmount = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    updatedGameState.winners = [];
    updatedGameState.isSvara = false;

    // –í—ã–±–∏—Ä–∞–µ–º –¥–∏–ª–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
    let newDealerIndex = -1;

    // –ü—Ä–∏ –°–≤–∞—Ä–µ –¥–∏–ª–µ—Ä –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    if (updatedGameState.isSvara) {
      newDealerIndex = updatedGameState.dealerIndex;
    } else if (previousWinnerId) {
      newDealerIndex = updatedGameState.players.findIndex(
        (p) => p.id === previousWinnerId,
      );
    }

    // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏–ª–∏ —É—à–µ–ª), –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥, –∏–ª–∏ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
    if (newDealerIndex === -1) {
      newDealerIndex =
        Math.floor(Math.random() * updatedGameState.players.length) || 0;
    }

    updatedGameState.dealerIndex = newDealerIndex;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    for (let i = 0; i < updatedGameState.players.length; i++) {
      updatedGameState.players[i] = this.playerService.resetPlayerForNewGame(
        updatedGameState.players[i],
        true,
      );
      updatedGameState.players[i].isDealer = i === updatedGameState.dealerIndex;
    }

    // –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
    updatedGameState.deck = this.cardService.shuffleDeck(
      this.cardService.createDeck(),
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
    const action: GameAction = {
      type: 'join',
      telegramId: 'system',
      timestamp: Date.now(),
      message: `–†–∞—É–Ω–¥ ${updatedGameState.round} –Ω–∞—á–∞–ª—Å—è`,
    };
    actions.push(action);

    return { updatedGameState, actions };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –¥–ª—è "—Å–≤–∞—Ä—ã"
  initializeSvaraGame(
    gameState: GameState,
    participantIds: string[],
  ): {
    updatedGameState: GameState;
    actions: GameAction[];
  } {
    const updatedGameState = { ...gameState };
    const actions: GameAction[] = [];

    // –ë–∞–Ω–∫ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–º–∏, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–≤–∞—Ä–µ

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    updatedGameState.status = 'ante';
    updatedGameState.round += 1;
    updatedGameState.currentBet = 0;
    updatedGameState.lastBlindBet = 0;
    updatedGameState.lastActionAmount = 0;
    updatedGameState.winners = [];
    updatedGameState.isSvara = true; // –§–ª–∞–≥, —á—Ç–æ —ç—Ç–æ —Ä–∞—É–Ω–¥ —Å–≤–∞—Ä—ã
    updatedGameState.svaraParticipants = []; // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    // –î–∏–ª–µ—Ä –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å–≤–∞—Ä–µ

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    for (let i = 0; i < updatedGameState.players.length; i++) {
      const player = updatedGameState.players[i];
      const isParticipant = participantIds.includes(player.id);

      updatedGameState.players[i] = this.playerService.resetPlayerForNewGame(
        player,
        isParticipant, // –ê–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–≤–∞—Ä—ã
      );
      updatedGameState.players[i].isDealer = i === updatedGameState.dealerIndex;
    }

    // –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É
    updatedGameState.deck = this.cardService.shuffleDeck(
      this.cardService.createDeck(),
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
    const action: GameAction = {
      type: 'svara',
      telegramId: 'system',
      timestamp: Date.now(),
      message: '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—É–Ω–¥ —Å–≤–∞—Ä—ã!',
    };
    actions.push(action);

    return { updatedGameState, actions };
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ –∏–≥—Ä—ã
  moveToNextPhase(
    gameState: GameState,
    nextPhase: GameState['status'],
  ): {
    updatedGameState: GameState;
    actions: GameAction[];
  } {
    const updatedGameState = { ...gameState };
    const actions: GameAction[] = [];

    updatedGameState.status = nextPhase;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
    const phaseMessages: Record<GameState['status'], string> = {
      waiting: '–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤',
      ante: '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ñ–∞–∑–∞ –≤—Ö–æ–¥–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫',
      blind_betting: '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ñ–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –≤—Å–ª–µ–ø—É—é',
      betting: '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ñ–∞–∑–∞ –æ–±—ã—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫',
      showdown: '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç',
      svara: '–û–±—ä—è–≤–ª–µ–Ω–∞ —Å–≤–∞—Ä–∞',
      svara_pending: '–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–≤–∞—Ä—ã',
      finished: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    };

    const message = phaseMessages[nextPhase] || `–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ: ${nextPhase}`;
    const action: GameAction = {
      type: 'join',
      telegramId: 'system',
      timestamp: Date.now(),
      message,
    };
    actions.push(action);

    return { updatedGameState, actions };
  }

  // –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º
  dealCardsToPlayers(gameState: GameState): {
    updatedGameState: GameState;
    actions: GameAction[];
  } {
    const updatedGameState = { ...gameState };
    const actions: GameAction[] = [];

    console.log('üé¥ Starting dealCardsToPlayers:', {
      totalPlayers: updatedGameState.players.length,
      activePlayers: updatedGameState.players.filter((p) => p.isActive).length,
      deckSize: updatedGameState.deck.length,
      roomId: updatedGameState.roomId,
      status: updatedGameState.status,
    });

    // –†–∞–∑–¥–∞–µ–º –ø–æ 3 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
    for (let i = 0; i < updatedGameState.players.length; i++) {
      const player = updatedGameState.players[i];
      console.log(`üé¥ Processing player ${i}:`, {
        playerId: player.id,
        username: player.username,
        isActive: player.isActive,
        position: player.position,
        currentCards: player.cards.length,
      });

      if (player.isActive) {
        const { cards, remainingDeck } = this.cardService.dealCards(
          updatedGameState.deck,
          3,
        );

        console.log(`üé¥ Dealt cards to player ${player.username}:`, {
          cardsCount: cards.length,
          cards: cards.map((c) => `${c.rank}${c.suit}`),
          remainingDeckSize: remainingDeck.length,
        });

        updatedGameState.players[i] = this.playerService.addCardsToPlayer(
          player,
          cards,
        );
        updatedGameState.deck = remainingDeck;

        console.log(`üé¥ After adding cards to ${player.username}:`, {
          finalCardsCount: updatedGameState.players[i].cards.length,
          finalCards: updatedGameState.players[i].cards.map(
            (c) => `${c.rank}${c.suit}`,
          ),
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
    const action: GameAction = {
      type: 'join',
      telegramId: 'system',
      timestamp: Date.now(),
      message: '–ö–∞—Ä—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã',
    };
    actions.push(action);

    return { updatedGameState, actions };
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  calculateScoresForPlayers(gameState: GameState): {
    updatedGameState: GameState;
    actions: GameAction[];
  } {
    const updatedGameState = { ...gameState };
    const actions: GameAction[] = [];

    // –í—ã—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for (let i = 0; i < updatedGameState.players.length; i++) {
      if (
        updatedGameState.players[i].isActive &&
        !updatedGameState.players[i].hasFolded
      ) {
        const score = this.cardService.calculateScore(
          updatedGameState.players[i].cards,
        );
        updatedGameState.players[i] = {
          ...updatedGameState.players[i],
          score,
        };

        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
        console.log('üìä Score calculation:', {
          playerId: updatedGameState.players[i].id,
          username: updatedGameState.players[i].username,
          score,
          cards: updatedGameState.players[i].cards,
          isActive: updatedGameState.players[i].isActive,
          hasFolded: updatedGameState.players[i].hasFolded,
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
        const action: GameAction = {
          type: 'join',
          telegramId: updatedGameState.players[i].id,
          timestamp: Date.now(),
          message: `–ò–≥—Ä–æ–∫ ${updatedGameState.players[i].username} –∏–º–µ–µ—Ç ${score} –æ—á–∫–æ–≤`,
        };
        actions.push(action);
      }
    }

    return { updatedGameState, actions };
  }
}
