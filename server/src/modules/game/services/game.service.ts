import { Injectable } from '@nestjs/common';
import { RedisService } from '../../../services/redis.service';
import {
  GameState,
  GameAction,
  GameActionResult,
  Room,
} from '../../../types/game';
import { CardService } from './card.service';
import { PlayerService } from './player.service';
import { BettingService } from './betting.service';
import { PotManager } from '../lib/pot-manager';
import { GameStateService } from './game-state.service';
import { UsersService } from '../../users/users.service';
import { UserDataDto } from '../dto/user-data.dto';
import { TURN_DURATION_SECONDS } from '../../../constants/game.constants';

@Injectable()
export class GameService {
  constructor(
    private readonly redisService: RedisService,
    private readonly cardService: CardService,
    private readonly playerService: PlayerService,
    private readonly bettingService: BettingService,
    private readonly gameStateService: GameStateService,
    private readonly usersService: UsersService,
  ) {
    setInterval(
      () => {
        this.redisService.cleanupDeadPlayers().catch((error) => {
          console.error('Error during periodic cleanup:', error);
        });
      },
      5 * 60 * 1000,
    );
  }

  async getRooms(): Promise<Room[]> {
    const roomIds = await this.redisService.getActiveRooms();
    const rooms: Room[] = [];
    for (const roomId of roomIds) {
      const room = await this.redisService.getRoom(roomId);
      if (room) {
        rooms.push(room);
      }
    }
    return rooms;
  }

  async leaveRoom(roomId: string, telegramId: string): Promise<void> {
    const room = await this.redisService.getRoom(roomId);
    const gameState = await this.redisService.getGameState(roomId);

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–º–Ω–∞—Ç—ã
    if (room) {
      room.players = room.players.filter((pId) => pId !== telegramId);
      if (room.players.length === 0) {
        // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –≤—Å—ë
        console.log(`Room ${roomId} is now empty, removing it.`);
        await this.redisService.removeRoom(roomId);
        await this.redisService.clearGameData(roomId);
        await this.redisService.publishRoomUpdate(roomId, null);
      } else {
        // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
        await this.redisService.setRoom(roomId, room);
        await this.redisService.publishRoomUpdate(roomId, room);
      }
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (gameState) {
      const playerIndex = gameState.players.findIndex((p) => p.id === telegramId);

      if (playerIndex > -1) {
        const removedPlayer = gameState.players[playerIndex];
        gameState.players.splice(playerIndex, 1);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤—ã—à–µ–¥—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        try {
          await this.usersService.updatePlayerBalance(
            telegramId,
            removedPlayer.balance,
          );
          await this.redisService.publishBalanceUpdate(
            telegramId,
            removedPlayer.balance,
          );
        } catch (error) {
          console.error(
            `Failed to save balance for leaving player ${telegramId}:`,
            error,
          );
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
        const action: GameAction = {
          type: 'leave',
          telegramId,
          timestamp: Date.now(),
          message: `–ò–≥—Ä–æ–∫ ${removedPlayer.username} –ø–æ–∫–∏–Ω—É–ª —Å—Ç–æ–ª`,
        };
        gameState.log.push(action);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–ª–∂–µ–Ω –ª–∏ —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è
        const activePlayers = gameState.players.filter(
          (p) => p.isActive && !p.hasFolded,
        );
        const activeStatuses = ['ante', 'blind_betting', 'betting', 'showdown'];

        if (
          activePlayers.length === 1 &&
          activeStatuses.includes(gameState.status)
        ) {
          // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫, –æ–Ω –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
          await this.redisService.setGameState(roomId, gameState);
          await this.redisService.publishGameUpdate(roomId, gameState);
          await this.endGameWithWinner(roomId, activePlayers[0].id);
          return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â–µ —Ä–∞–∑
        }

        // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–µ –≤—ã–∑—ã–≤–∞–µ–º startGame –æ—Ç—Å—é–¥–∞.
        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);
      }
    }

    // 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    await this.redisService.removePlayerFromRoom(roomId, telegramId);
  }

  async joinRoom(
    roomId: string,
    telegramId: string,
  ): Promise<GameActionResult> {
    const room = await this.redisService.getRoom(roomId);
    if (!room) {
      return { success: false, error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    if (!room.players.includes(telegramId)) {
      room.players.push(telegramId);
      await this.redisService.setRoom(roomId, room);
      await this.redisService.addPlayerToRoom(roomId, telegramId);
      await this.redisService.publishRoomUpdate(roomId, room);
    }

    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState) {
      return { success: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    return { success: true, gameState };
  }

  async sitDown(
    roomId: string,
    telegramId: string,
    position: number,
    userData: UserDataDto,
  ): Promise<GameActionResult> {
    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState) {
      return { success: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    if (gameState.players.some((p) => p.position === position)) {
      return { success: false, error: '–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ' };
    }

    if (gameState.players.some((p) => p.id === telegramId)) {
      return { success: false, error: '–í—ã —É–∂–µ —Å–∏–¥–∏—Ç–µ –∑–∞ —Å—Ç–æ–ª–æ–º' };
    }

    const userProfile = await this.usersService.getProfile(telegramId);
    const isGameInProgress = gameState.status !== 'waiting';
    const newPlayer = this.playerService.createPlayer(
      telegramId,
      userData,
      position,
      userProfile.balance,
      !isGameInProgress, // isActive is false if game is in progress
    );
    gameState.players.push(newPlayer);

    const action: GameAction = {
      type: 'join',
      telegramId,
      timestamp: Date.now(),
      message: `–ò–≥—Ä–æ–∫ ${newPlayer.username} —Å–µ–ª –∑–∞ —Å—Ç–æ–ª –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${position}`,
    };
    gameState.log.push(action);

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

    const room = await this.redisService.getRoom(roomId);
    if (room && gameState.players.length >= 2 && room.status === 'waiting') {
      await this.startGame(roomId);
    }

    return { success: true, gameState };
  }

  async startGame(roomId: string): Promise<void> {
    const room = await this.redisService.getRoom(roomId);
    if (!room || (room.status !== 'waiting' && room.status !== 'finished')) {
      return;
    }

    const gameState = await this.redisService.getGameState(roomId);

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –∏–≥—Ä–∞—Ç—å
    if (room.status === 'finished' && gameState) {
      const minBalance = room.minBet * 10;
      gameState.players = gameState.players.filter(
        (p) => p.balance >= minBalance,
      );
    }

    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è) —É –Ω–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
    if (!gameState || gameState.players.length < 2) {
      console.log(
        `Not enough players to start/continue game in room ${roomId}. Going to waiting state.`,
      );
      room.status = 'waiting';
      await this.redisService.setRoom(roomId, room);
      if (gameState) {
        const newGameState = this.gameStateService.createInitialGameState(
          roomId,
          room.minBet,
        );
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        newGameState.players = gameState.players.map((p) =>
          this.playerService.resetPlayerForNewGame(p, false),
        );
        await this.redisService.setGameState(roomId, newGameState);
        await this.redisService.publishGameUpdate(roomId, newGameState);
      }
      await this.redisService.publishRoomUpdate(roomId, room);
      return;
    }

    room.status = 'playing';
    await this.redisService.setRoom(roomId, room);
    await this.redisService.publishRoomUpdate(roomId, room);

    // –¢–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É. initializeNewGame –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π (–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π) –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤.
    const { updatedGameState, actions } =
      this.gameStateService.initializeNewGame(gameState, room.winner);

    const finalGameState = updatedGameState;
    finalGameState.log.push(...actions);

    await this.redisService.setGameState(roomId, finalGameState);
    await this.redisService.publishGameUpdate(roomId, finalGameState);

    await this.startAntePhase(roomId);
  }

  async startAntePhase(roomId: string): Promise<void> {
    let gameState = await this.redisService.getGameState(roomId);
    if (!gameState || gameState.status !== 'ante') {
      console.log('üö´ startAntePhase skipped:', {
        roomId,
        hasGameState: !!gameState,
        status: gameState?.status,
      });
      return;
    }

    

    const { updatedGameState, actions } = this.bettingService.processAnte(
      gameState,
      gameState.minBet,
    );
    gameState = updatedGameState;
    gameState.log.push(...actions);

    const activePlayers = gameState.players.filter((p) => p.isActive);
    if (activePlayers.length < 2) {
      if (activePlayers.length === 1) {
        await this.endGameWithWinner(roomId, activePlayers[0].id);
      } else {
        await this.endGame(roomId, gameState);
      }
      return;
    }

    const dealResult = this.gameStateService.dealCardsToPlayers(gameState);
    gameState = dealResult.updatedGameState;
    gameState.log.push(...dealResult.actions);

    const phaseResult = this.gameStateService.moveToNextPhase(
      gameState,
      'blind_betting',
    );
    gameState = phaseResult.updatedGameState;
    gameState.log.push(...phaseResult.actions);

    gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
      gameState.players,
      gameState.dealerIndex,
    );

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);
  }

  // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å–≤–∞—Ä—ã
  private svaraTimers: Map<string, NodeJS.Timeout> = new Map();

  async joinSvara(
    roomId: string,
    telegramId: string,
  ): Promise<GameActionResult> {
    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState) {
      return { success: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    // –ì–∏–±–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –µ—Å–ª–∏ —Ñ–∞–∑–∞ —Å–≤–∞—Ä—ã —É–∂–µ –ø—Ä–æ—à–ª–∞, –Ω–æ –∏–≥—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ,
    // –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ—à–∏–±–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ.
    if (gameState.status !== 'svara_pending') {
      if (gameState.svaraConfirmed?.includes(telegramId)) {
        return { success: true, gameState };
      } else {
        return { success: false, error: '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–∞—Ä–µ' };
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ —Ä–µ—à–µ–Ω–∏–µ
    if (
      gameState.svaraConfirmed?.includes(telegramId) ||
      gameState.svaraDeclined?.includes(telegramId)
    ) {
      return { success: true, gameState }; // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    }

    const player = gameState.players.find((p) => p.id === telegramId);
    if (!player) {
      return { success: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–≤–∞—Ä—ã (–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º)
    const isOriginalWinner =
      gameState.svaraParticipants &&
      gameState.svaraParticipants.includes(telegramId);

    if (!gameState.svaraConfirmed) {
      gameState.svaraConfirmed = [];
    }

    if (isOriginalWinner) {
      // –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ —É—á–∞—Å—Ç–≤—É—é—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ
      console.log(`Player ${telegramId} joins Svara as original winner (free)`);
      if (!gameState.svaraConfirmed.includes(telegramId)) {
        gameState.svaraConfirmed.push(telegramId);
      }
    } else {
      // –û–±—ã—á–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –¥–æ–ø–ª–∞—Ç–∏—Ç—å —Å—É–º–º—É —Ä–∞–≤–Ω—É—é –±–∞–Ω–∫—É
      const svaraBuyInAmount = gameState.pot;
      if (player.balance < svaraBuyInAmount) {
        return {
          success: false,
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–≤–∞—Ä—É',
        };
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–Ω–∫
      player.balance -= svaraBuyInAmount;
      gameState.pot += svaraBuyInAmount;

      console.log(
        `Player ${telegramId} joins Svara with buy-in: ${svaraBuyInAmount}`,
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö
      if (!gameState.svaraConfirmed.includes(telegramId)) {
        gameState.svaraConfirmed.push(telegramId);
      }
    }

    const action: GameAction = {
      type: 'join',
      telegramId,
      timestamp: Date.now(),
      message: isOriginalWinner
        ? `–ò–≥—Ä–æ–∫ ${player.username} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–∞—Ä–µ –∫–∞–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å`
        : `–ò–≥—Ä–æ–∫ ${player.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–≤–∞—Ä–µ, –¥–æ–±–∞–≤–∏–≤ –≤ –±–∞–Ω–∫ ${gameState.pot}`,
    };
    gameState.log.push(action);

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ —Å–≤–∞—Ä–∞
    await this._checkSvaraCompletion(roomId, gameState);

    return { success: true, gameState };
  }

  async skipSvara(
    roomId: string,
    telegramId: string,
  ): Promise<GameActionResult> {
    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState || gameState.status !== 'svara_pending') {
      return { success: false, error: '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–∞—Ä—É' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ —Ä–µ—à–µ–Ω–∏–µ
    if (
      gameState.svaraConfirmed?.includes(telegramId) ||
      gameState.svaraDeclined?.includes(telegramId)
    ) {
      console.log(
        `Player ${telegramId} has already made a decision for svara.`,
      );
      return { success: true, gameState }; // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    }

    const player = gameState.players.find((p) => p.id === telegramId);
    if (!player) {
      return { success: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è
    if (!gameState.svaraDeclined) {
      gameState.svaraDeclined = [];
    }
    if (!gameState.svaraDeclined.includes(telegramId)) {
      gameState.svaraDeclined.push(telegramId);
    }

    const action: GameAction = {
      type: 'fold', // –ò—Å–ø–æ–ª—å–∑—É–µ–º fold –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏ –Ω–æ–≤—ã–π —Ç–∏–ø
      telegramId,
      timestamp: Date.now(),
      message: `–ò–≥—Ä–æ–∫ ${player.username} —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–∞—Ä—É`,
    };
    gameState.log.push(action);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –º–æ–≥ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ)
    await this.redisService.publishGameUpdate(roomId, gameState);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ —Å–≤–∞—Ä–∞
    await this._checkSvaraCompletion(roomId, gameState);

    return { success: true, gameState };
  }

  async processAction(
    roomId: string,
    telegramId: string,
    action: string,
    amount?: number,
  ): Promise<GameActionResult> {
    if (action === 'join_svara') {
      return this.joinSvara(roomId, telegramId);
    }
    if (action === 'skip_svara') {
      return this.skipSvara(roomId, telegramId);
    }

    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState) {
      return { success: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    const playerIndex = gameState.players.findIndex((p) => p.id === telegramId);
    const player = gameState.players[playerIndex];

    if (!player) {
      return { success: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –∏–≥—Ä–µ' };
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º fold –¥–æ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, —á—Ç–æ–±—ã —Ç–∞–π–º–∞—É—Ç –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if (action === 'fold') {
      if (gameState.currentPlayerIndex !== playerIndex) {
        return { success: false, error: '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥' };
      }
      return this.handleFold(roomId, gameState, playerIndex);
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∫–∞—Ä—Ç—ã, –æ–Ω –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–±—Ä–æ—Å–∏—Ç—å, –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–≤—ã—Å–∏—Ç—å
    if (player.hasLookedAndMustAct && !['raise', 'call'].includes(action)) {
      return {
        success: false,
        error:
          '–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–≤—ã—Å–∏—Ç—å, –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—ã',
      };
    }

    if (gameState.currentPlayerIndex !== playerIndex) {
      return { success: false, error: '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥' };
    }

    const { canPerform, error } = this.bettingService.canPerformAction(
      player,
      action,
      gameState,
    );
    if (!canPerform) {
      return { success: false, error };
    }

    switch (action) {
      // case 'fold': // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ
      case 'blind_bet':
      case 'look':
        return this.processBlindBettingAction(
          roomId,
          gameState,
          playerIndex,
          action,
        );
      case 'call':
      case 'raise':
        return this.processBettingAction(
          roomId,
          gameState,
          playerIndex,
          action,
          amount,
        );
      case 'all_in':
        return this.handleAllIn(roomId, gameState, playerIndex, amount);
      default:
        return {
          success: false,
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ',
        };
    }
  }

  private async handleFold(
    roomId: string,
    gameState: GameState,
    playerIndex: number,
  ): Promise<GameActionResult> {
    const player = gameState.players[playerIndex];

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã –≤–æ –≤—Ä–µ–º—è —Å—Ç–∞–≤–æ–∫ –≤—Å–ª–µ–ø—É—é, –ø–æ—Å–ª–µ–¥–Ω–∏–π, –∫—Ç–æ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –±–∞–Ω–∫
    if (
      gameState.status === 'blind_betting' &&
      gameState.lastBlindBettorIndex !== undefined
    ) {
      const lastBettor = gameState.players[gameState.lastBlindBettorIndex];
      if (lastBettor && lastBettor.id !== player.id) {
        console.log(
          `Player ${player.username} folded to a blind bet. Winner is ${lastBettor.username}.`,
        );

        // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ —Å–±—Ä–æ—Å–∏–≤—à–µ–≥–æ –∫–∞—Ä—Ç—ã
        gameState.players[playerIndex] = this.playerService.updatePlayerStatus(
          player,
          {
            hasFolded: true,
            lastAction: 'fold',
            hasLookedAndMustAct: false,
          },
        );
        const foldAction: GameAction = {
          type: 'fold',
          telegramId: player.id,
          timestamp: Date.now(),
          message: `–ò–≥—Ä–æ–∫ ${player.username} —Å–±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—ã –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∞–≤–∫—É –≤—Å–ª–µ–ø—É—é`,
        };
        gameState.log.push(foldAction);

        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–±—Ä–æ—Å –∫–∞—Ä—Ç, –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);

        await this.endGameWithWinner(roomId, lastBettor.id);
        return { success: true };
      }
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–∑
    gameState.players[playerIndex] = this.playerService.updatePlayerStatus(
      player,
      {
        hasFolded: true,
        lastAction: 'fold',
        hasLookedAndMustAct: false,
      },
    );

    const foldAction: GameAction = {
      type: 'fold',
      telegramId: player.id,
      timestamp: Date.now(),
      message: `–ò–≥—Ä–æ–∫ ${player.username} —Å–±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—ã`,
    };
    gameState.log.push(foldAction);

    const activePlayers = gameState.players.filter((p) => !p.hasFolded);

    if (activePlayers.length === 1) {
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≥–¥–µ –∏–≥—Ä–æ–∫ —Å–±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—ã
      await this.redisService.setGameState(roomId, gameState);
      await this.redisService.publishGameUpdate(roomId, gameState);
      // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
      await this.endGameWithWinner(roomId, activePlayers[0].id);
      return { success: true };
    } else {
      gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
        gameState.players,
        gameState.currentPlayerIndex,
      );
      if (this.bettingService.isBettingRoundComplete(gameState)) {
        await this.endBettingRound(roomId, gameState);
        return { success: true };
      }
    }

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);
    return { success: true, gameState };
  }

  private async processBlindBettingAction(
    roomId: string,
    gameState: GameState,
    playerIndex: number,
    action: string,
  ): Promise<GameActionResult> {
    const player = gameState.players[playerIndex];
    switch (action) {
      case 'blind_bet': {
        const blindBetAmount =
          gameState.lastBlindBet > 0
            ? gameState.lastBlindBet * 2
            : gameState.minBet;
        if (player.balance < blindBetAmount) {
          return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' };
        }
        const { updatedPlayer, action: blindAction } =
          this.playerService.processPlayerBet(
            player,
            blindBetAmount,
            'blind_bet',
          );
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º lastAction –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        gameState.players[playerIndex] = this.playerService.updatePlayerStatus(
          updatedPlayer,
          { lastAction: 'blind' },
        );
        gameState.pot = Number((gameState.pot + blindBetAmount).toFixed(2));
        gameState.lastBlindBet = blindBetAmount;
        gameState.lastBlindBettorIndex = playerIndex; // Set the index of the blind bettor
        gameState.log.push(blindAction);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        gameState.isAnimating = true;
        gameState.animationType = 'chip_fly';

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);

        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        await new Promise((resolve) => setTimeout(resolve, 1000));

        // –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        gameState.isAnimating = false;
        gameState.animationType = undefined;

        gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
          gameState.players,
          gameState.currentPlayerIndex,
        );
        break;
      }
      case 'look': {
        const calculatedScore = this.cardService.calculateScore(player.cards);

        // –ò–≥—Ä–æ–∫ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥.
        gameState.players[playerIndex] = this.playerService.updatePlayerStatus(
          player,
          {
            hasLooked: true,
            lastAction: 'look',
            hasLookedAndMustAct: true, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
          },
        );
        gameState.players[playerIndex].score = calculatedScore;

        const lookAction: GameAction = {
          type: 'look',
          telegramId: player.id,
          timestamp: Date.now(),
          message: `–ò–≥—Ä–æ–∫ ${player.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∫–∞—Ä—Ç—ã –∏ –∏–º–µ–µ—Ç ${calculatedScore} –æ—á–∫–æ–≤`,
        };
        gameState.log.push(lookAction);

        // –•–æ–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è, –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (fold –∏–ª–∏ raise)
        break;
      }
    }
    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);
    return { success: true, gameState };
  }

  private async processBettingAction(
    roomId: string,
    gameState: GameState,
    playerIndex: number,
    action: string,
    amount?: number,
  ): Promise<GameActionResult> {
    const player = gameState.players[playerIndex];
    switch (action) {
      case 'call': {
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∫–æ–ª–ª–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ñ–∞–∑—É —Ç–æ—Ä–≥–æ–≤.
        if (player.hasLookedAndMustAct) {
          const callAmount =
            gameState.lastBlindBet > 0
              ? gameState.lastBlindBet * 2
              : gameState.minBet;

          if (player.balance < callAmount) {
            return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' };
          }

          const { updatedPlayer, action: callAction } =
            this.playerService.processPlayerBet(player, callAmount, 'call');
          
          gameState.players[playerIndex] = this.playerService.updatePlayerStatus(
            updatedPlayer,
            { hasLookedAndMustAct: false }, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
          );
          gameState.pot = Number((gameState.pot + callAmount).toFixed(2));
          gameState.lastActionAmount = callAmount;
          gameState.lastRaiseIndex = playerIndex; // –≠—Ç–æ—Ç call –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –ø–µ—Ä–≤—ã–π raise
          gameState.log.push(callAction);

          // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä—É –≤ —Ñ–∞–∑—É betting –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –æ—Å—Ç–∞–ª—å–Ω—ã–º
          const phaseResult = this.gameStateService.moveToNextPhase(
            gameState,
            'betting',
          );
          gameState = phaseResult.updatedGameState;
          gameState.log.push(...phaseResult.actions);

          for (let i = 0; i < gameState.players.length; i++) {
            if (i !== playerIndex && gameState.players[i].isActive && !gameState.players[i].hasFolded) {
              gameState.players[i] = this.playerService.updatePlayerStatus(
                gameState.players[i],
                { hasLooked: true },
              );
            }
          }

          const scoreResult =
            this.gameStateService.calculateScoresForPlayers(gameState);
          gameState = scoreResult.updatedGameState;
          gameState.log.push(...scoreResult.actions);
          break;
        }

        // –û–±—ã—á–Ω—ã–π call –≤ —Ñ–∞–∑–µ betting
        if (playerIndex === gameState.lastRaiseIndex) {
          await this.endBettingRound(roomId, gameState);
          return { success: true };
        }

        const callAmount = gameState.lastActionAmount;
        if (callAmount <= 0) {
          return {
            success: false,
            error: '–ù–µ—á–µ–≥–æ —É—Ä–∞–≤–Ω–∏–≤–∞—Ç—å',
          };
        }
        if (player.balance < callAmount) {
          return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' };
        }

        const { updatedPlayer, action: callAction } =
          this.playerService.processPlayerBet(player, callAmount, 'call');
        gameState.players[playerIndex] = updatedPlayer;
        gameState.pot = Number((gameState.pot + callAmount).toFixed(2));
        gameState.lastActionAmount = callAmount;
        gameState.log.push(callAction);
        break;
      }
      case 'raise': {
        const raiseAmount = amount || 0;
        const isPostLookRaise = player.hasLookedAndMustAct;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è
        const minRaiseAmount =
          gameState.lastBlindBet > 0
            ? gameState.lastBlindBet * 2
            : gameState.minBet;

        if (raiseAmount < minRaiseAmount) {
          return {
            success: false,
            error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ: ${minRaiseAmount}`,
          };
        }

        if (player.balance < raiseAmount) {
          return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' };
        }

        const { updatedPlayer, action: raiseAction } =
          this.playerService.processPlayerBet(player, raiseAmount, 'raise');

        raiseAction.message = `–ò–≥—Ä–æ–∫ ${player.username} –ø–æ–≤—ã—Å–∏–ª –¥–æ ${raiseAmount}`;

        gameState.players[playerIndex] = this.playerService.updatePlayerStatus(
          updatedPlayer,
          { hasLookedAndMustAct: false }, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
        );
        gameState.pot = Number((gameState.pot + raiseAmount).toFixed(2));
        gameState.lastRaiseIndex = playerIndex;
        gameState.lastActionAmount = raiseAmount;
        gameState.log.push(raiseAction);

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç, –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä—É –≤ —Ñ–∞–∑—É betting
        if (isPostLookRaise) {
          const phaseResult = this.gameStateService.moveToNextPhase(
            gameState,
            'betting',
          );
          gameState = phaseResult.updatedGameState;
          gameState.log.push(...phaseResult.actions);

          // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ—Ç—Ä—è—Ç –∫–∞—Ä—Ç—ã
          for (let i = 0; i < gameState.players.length; i++) {
            if (
              i !== playerIndex &&
              gameState.players[i].isActive &&
              !gameState.players[i].hasFolded
            ) {
              gameState.players[i] = this.playerService.updatePlayerStatus(
                gameState.players[i],
                { hasLooked: true },
              );
            }
          }

          // –í—ã—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
          const scoreResult =
            this.gameStateService.calculateScoresForPlayers(gameState);
          gameState = scoreResult.updatedGameState;
          gameState.log.push(...scoreResult.actions);
        }
        break;
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    gameState.isAnimating = true;
    gameState.animationType = 'chip_fly';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

    // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await new Promise((resolve) => setTimeout(resolve, 1000));

    // –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    gameState.isAnimating = false;
    gameState.animationType = undefined;

    gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
      gameState.players,
      gameState.currentPlayerIndex,
    );
    if (this.bettingService.isBettingRoundComplete(gameState)) {
      await this.endBettingRound(roomId, gameState);
    } else {
      await this.redisService.setGameState(roomId, gameState);
      await this.redisService.publishGameUpdate(roomId, gameState);
    }
    return { success: true, gameState };
  }

  private async endBettingRound(
    roomId: string,
    gameState: GameState,
  ): Promise<void> {
    const scoreResult = this.gameStateService.calculateScoresForPlayers(gameState);
    gameState = scoreResult.updatedGameState;
    gameState.log.push(...scoreResult.actions);

    const winners = this.playerService.determineWinners(gameState.players);
    
    if (winners.length > 1) {
        // Svara
        console.log(`Svara`);
        const phaseResult = this.gameStateService.moveToNextPhase(
            gameState,
            'svara_pending',
        );
        gameState = phaseResult.updatedGameState;
        gameState.log.push(...phaseResult.actions);

        gameState.isSvara = true;
        gameState.svaraParticipants = winners.map((w) => w.id);
        gameState.winners = winners;
        gameState.svaraConfirmed = [];
        gameState.svaraDeclined = [];

        const svaraAction: GameAction = {
            type: 'svara',
            telegramId: 'system',
            timestamp: Date.now(),
            message:
            '–û–±—ä—è–≤–ª–µ–Ω–∞ "–°–≤–∞—Ä–∞"! –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥.',
        };
        gameState.log.push(svaraAction);

        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);

        const timer = setTimeout(() => {
            this.resolveSvara(roomId).catch((error) => {
                console.error(`Error resolving svara for room ${roomId}:`, error);
            });
        }, TURN_DURATION_SECONDS * 1000); // 20 —Å–µ–∫—É–Ω–¥
        this.svaraTimers.set(roomId, timer);
    } else if (winners.length === 1) {
        await this.endGameWithWinner(roomId, winners[0].id);
    } else {
        await this.endGame(roomId, gameState);
    }
  }

  private async _checkSvaraCompletion(
    roomId: string,
    gameState: GameState,
  ): Promise<void> {
    const totalPlayers = gameState.players.length;
    const decisionsCount =
      (gameState.svaraConfirmed?.length || 0) +
      (gameState.svaraDeclined?.length || 0);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–≤–∞—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–°–ï –∏–≥—Ä–æ–∫–∏ –∑–∞ —Å—Ç–æ–ª–æ–º –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ
    if (decisionsCount >= totalPlayers) {
      console.log(
        `All ${totalPlayers} players have made a decision for svara in room ${roomId}. Resolving immediately.`,
      );
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–≤–∞—Ä—É, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ
      await this.resolveSvara(roomId);
    }
  }

  private async resolveSvara(roomId: string): Promise<void> {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (this.svaraTimers.has(roomId)) {
      clearTimeout(this.svaraTimers.get(roomId));
      this.svaraTimers.delete(roomId);
    }

    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState || gameState.status !== 'svara_pending') {
      return; // –ò–≥—Ä–∞ —É–∂–µ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–≤–∞—Ä—ã
    }

    const participants = gameState.svaraConfirmed || [];

    if (participants.length >= 2) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–≤–∞—Ä—É
      await this.startSvaraGame(roomId, participants);
    } else if (participants.length === 1) {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å), –æ–Ω –∑–∞–±–∏—Ä–∞–µ—Ç –±–∞–Ω–∫
      await this.endGameWithWinner(roomId, participants[0]);
    } else {
      // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ), –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
      await this.endGame(roomId, gameState);
    }
  }

  private async startSvaraGame(
    roomId: string,
    participantIds: string[],
  ): Promise<void> {
    let gameState = await this.redisService.getGameState(roomId);
    if (!gameState) return;

    const { updatedGameState, actions } =
      this.gameStateService.initializeSvaraGame(gameState, participantIds);
    gameState = updatedGameState;
    gameState.log.push(...actions);

    const dealResult = this.gameStateService.dealCardsToPlayers(gameState);
    gameState = dealResult.updatedGameState;
    gameState.log.push(...dealResult.actions);

    const phaseResult = this.gameStateService.moveToNextPhase(
      gameState,
      'blind_betting',
    );
    gameState = phaseResult.updatedGameState;
    gameState.log.push(...phaseResult.actions);

    gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
      gameState.players,
      gameState.dealerIndex,
    );

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);
  }

  private async endGameWithWinner(
    roomId: string,
    winnerId: string,
  ): Promise<void> {
    let gameState = await this.redisService.getGameState(roomId);
    if (!gameState) return;

    const { pots, returnedAmount, returnedTo } = PotManager.calculatePots(gameState.players);
    gameState.potInfo = pots;

    if (returnedAmount > 0 && returnedTo) {
        const player = gameState.players.find(p => p.id === returnedTo);
        if (player) {
            player.balance += returnedAmount;
            const returnAction: GameAction = {
                type: 'return_bet',
                telegramId: returnedTo,
                amount: returnedAmount,
                timestamp: Date.now(),
                message: `–ò–≥—Ä–æ–∫—É ${player.username} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${returnedAmount}`
            };
            gameState.log.push(returnAction);
            await this.usersService.updatePlayerBalance(player.id, player.balance);
            await this.redisService.publishBalanceUpdate(player.id, player.balance);
        }
    }

    gameState.pot = gameState.pot - returnedAmount;

    for (let i = 0; i < pots.length; i++) {
        const pot = pots[i];
        const potContributors = gameState.players.filter(p => pot.contributors.includes(p.id));
        const winners = this.playerService.determineWinners(potContributors);

        if (winners.length > 1) {
            // Svara
            console.log(`Svara for pot ${i}`);
            const winAmount = pot.amount / winners.length;
            for (const winner of winners) {
                winner.balance += winAmount;
                const winAction: GameAction = {
                    type: 'win',
                    telegramId: winner.id,
                    amount: winAmount,
                    timestamp: Date.now(),
                    message: `–ò–≥—Ä–æ–∫ ${winner.username} –≤—ã–∏–≥—Ä–∞–ª ${winAmount} –≤ —Å–≤–∞—Ä–µ`
                };
                gameState.log.push(winAction);
            }
        } else if (winners.length === 1) {
            const winner = winners[0];
            winner.balance += pot.amount;
            const winAction: GameAction = {
                type: 'win',
                telegramId: winner.id,
                amount: pot.amount,
                timestamp: Date.now(),
                message: `–ò–≥—Ä–æ–∫ ${winner.username} –≤—ã–∏–≥—Ä–∞–ª –±–∞–Ω–∫ ${pot.amount}`
            };
            gameState.log.push(winAction);
        }

        gameState.winners = winners;
        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);
        await new Promise(resolve => setTimeout(resolve, 3000)); // Wait for animation
    }

    await this.endGame(roomId, gameState);
  }

  private async endGame(roomId: string, gameState: GameState): Promise<void> {

    const phaseResult = this.gameStateService.moveToNextPhase(
      gameState,
      'finished',
    );
    gameState = phaseResult.updatedGameState;
    gameState.log.push(...phaseResult.actions);

    const action: GameAction = {
      type: 'join',
      telegramId: 'system',
      timestamp: Date.now(),
      message: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è',
    };
    gameState.log.push(action);

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

    const room = await this.redisService.getRoom(roomId);
    if (room) {
      room.status = 'finished';
      room.finishedAt = new Date();
      await this.redisService.setRoom(roomId, room);
      await this.redisService.publishRoomUpdate(roomId, room);
    }

    // Auto-restart game after 5 seconds
    setTimeout(() => {
      this.startGame(roomId).catch((err) =>
        console.error(`Failed to auto-restart game ${roomId}`, err),
      );
    }, 5000);
  }

  private async handleAllIn(
    roomId: string,
    gameState: GameState,
    playerIndex: number,
    amount?: number,
  ): Promise<GameActionResult> {
    const player = gameState.players[playerIndex];
    console.log(`[All-In] Player ${player.username} is going all-in with ${player.balance}`);
    const allInAmount = amount ?? player.balance;

    if (allInAmount > player.balance) {
        return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' };
    }

    const { updatedPlayer, action: allInAction } = this.playerService.processPlayerBet(
      player,
      allInAmount,
      'all_in',
    );

    gameState.players[playerIndex] = this.playerService.updatePlayerStatus(updatedPlayer, {
      isAllIn: true,
      lastAction: 'raise', // Treat all-in as a raise
    });

    gameState.pot = Number((gameState.pot + allInAmount).toFixed(2));
    gameState.lastActionAmount = allInAmount;
    gameState.lastRaiseIndex = playerIndex;
    gameState.log.push(allInAction);

    const activePlayers = gameState.players.filter(p => !p.hasFolded);
    const allInPlayers = activePlayers.filter(p => p.isAllIn);

    if (allInPlayers.length === activePlayers.length) {
      // All active players are all-in, go to showdown
      await this.endBettingRound(roomId, gameState);
    } else {
      // Move to next player
      gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
        gameState.players,
        gameState.currentPlayerIndex,
      );
      if (this.bettingService.isBettingRoundComplete(gameState)) {
        await this.endBettingRound(roomId, gameState);
      } else {
        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);
      }
    }

    return { success: true, gameState };
  }
}
