import { Injectable } from '@nestjs/common';
import { RedisService } from '../../../services/redis.service';
import {
  GameState,
  GameAction,
  GameActionResult,
  Room,
} from '../../../types/game';
import { CardService } from './card.service';
import { PlayerService } from './player.service';
import { BettingService } from './betting.service';
import { GameStateService } from './game-state.service';
import { UsersService } from '../../users/users.service';
import { UserDataDto } from '../dto/user-data.dto';

@Injectable()
export class GameService {
  constructor(
    private readonly redisService: RedisService,
    private readonly cardService: CardService,
    private readonly playerService: PlayerService,
    private readonly bettingService: BettingService,
    private readonly gameStateService: GameStateService,
    private readonly usersService: UsersService,
  ) {
    setInterval(
      () => {
        this.redisService.cleanupDeadPlayers().catch((error) => {
          console.error('Error during periodic cleanup:', error);
        });
      },
      5 * 60 * 1000,
    );
  }

  async getRooms(): Promise<Room[]> {
    const roomIds = await this.redisService.getActiveRooms();
    const rooms: Room[] = [];
    for (const roomId of roomIds) {
      const room = await this.redisService.getRoom(roomId);
      if (room) {
        rooms.push(room);
      }
    }
    return rooms;
  }

  async leaveRoom(roomId: string, telegramId: string): Promise<void> {
    const room = await this.redisService.getRoom(roomId);
    if (!room) return;

    room.players = room.players.filter((playerId) => playerId !== telegramId);
    await this.redisService.setRoom(roomId, room);
    await this.redisService.publishRoomUpdate(roomId, room);

    const gameState = await this.redisService.getGameState(roomId);
    if (gameState) {
      const playerIndex = gameState.players.findIndex(
        (p) => p.id === telegramId,
      );
      if (playerIndex > -1) {
        const removedPlayer = gameState.players.splice(playerIndex, 1)[0];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ –≤ –ë–î –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        try {
          await this.usersService.updatePlayerBalance(
            telegramId,
            removedPlayer.balance,
          );
          console.log(
            `Player ${telegramId} left room - balance saved to DB: ${removedPlayer.balance}`,
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫—É
          await this.redisService.publishBalanceUpdate(
            telegramId,
            removedPlayer.balance,
          );
        } catch (error) {
          console.error(
            `Failed to save balance to DB for leaving player ${telegramId}:`,
            error,
          );
        }

        const action: GameAction = {
          type: 'leave',
          telegramId,
          timestamp: Date.now(),
          message: `–ò–≥—Ä–æ–∫ ${removedPlayer.username} –ø–æ–∫–∏–Ω—É–ª —Å—Ç–æ–ª`,
        };
        gameState.log.push(action);
        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);
      }
      if (gameState.players.length === 0) {
        await this.redisService.removeRoom(roomId);
        await this.redisService.clearGameData(roomId);
      }
    }
    await this.redisService.removePlayerFromRoom(roomId, telegramId);
  }

  async joinRoom(
    roomId: string,
    telegramId: string,
  ): Promise<GameActionResult> {
    const room = await this.redisService.getRoom(roomId);
    if (!room) {
      return { success: false, error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    if (!room.players.includes(telegramId)) {
      room.players.push(telegramId);
      await this.redisService.setRoom(roomId, room);
      await this.redisService.addPlayerToRoom(roomId, telegramId);
      await this.redisService.publishRoomUpdate(roomId, room);
    }

    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState) {
      return { success: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    return { success: true, gameState };
  }

  async sitDown(
    roomId: string,
    telegramId: string,
    position: number,
    userData: UserDataDto,
  ): Promise<GameActionResult> {
    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState) {
      return { success: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    if (gameState.players.some((p) => p.position === position)) {
      return { success: false, error: '–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ' };
    }

    if (gameState.players.some((p) => p.id === telegramId)) {
      return { success: false, error: '–í—ã —É–∂–µ —Å–∏–¥–∏—Ç–µ –∑–∞ —Å—Ç–æ–ª–æ–º' };
    }

    const userProfile = await this.usersService.getProfile(telegramId);
    const newPlayer = this.playerService.createPlayer(
      telegramId,
      userData,
      position,
      userProfile.balance,
    );
    gameState.players.push(newPlayer);

    const action: GameAction = {
      type: 'join',
      telegramId,
      timestamp: Date.now(),
      message: `–ò–≥—Ä–æ–∫ ${newPlayer.username} —Å–µ–ª –∑–∞ —Å—Ç–æ–ª –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${position}`,
    };
    gameState.log.push(action);

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

    const room = await this.redisService.getRoom(roomId);
    if (room && gameState.players.length >= 2 && room.status === 'waiting') {
      await this.startGame(roomId);
    }

    return { success: true, gameState };
  }

  async startGame(roomId: string): Promise<void> {
    const room = await this.redisService.getRoom(roomId);
    if (!room || (room.status !== 'waiting' && room.status !== 'finished')) {
      return;
    }

    const gameState = await this.redisService.getGameState(roomId);

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –∏–≥—Ä–∞—Ç—å
    if (room.status === 'finished' && gameState) {
      const minBalance = room.minBet * 10;
      gameState.players = gameState.players.filter(
        (p) => p.balance >= minBalance,
      );
    }

    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è) —É –Ω–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
    if (!gameState || gameState.players.length < 2) {
      console.log(
        `Not enough players to start/continue game in room ${roomId}. Going to waiting state.`,
      );
      room.status = 'waiting';
      await this.redisService.setRoom(roomId, room);
      if (gameState) {
        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);
      }
      await this.redisService.publishRoomUpdate(roomId, room);
      return;
    }

    room.status = 'playing';
    await this.redisService.setRoom(roomId, room);
    await this.redisService.publishRoomUpdate(roomId, room);

    // –¢–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É. initializeNewGame –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π (–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π) –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤.
    const { updatedGameState, actions } =
      this.gameStateService.initializeNewGame(gameState, room.winner);

    const finalGameState = updatedGameState;
    finalGameState.log.push(...actions);

    await this.redisService.setGameState(roomId, finalGameState);
    await this.redisService.publishGameUpdate(roomId, finalGameState);

    await this.startAntePhase(roomId);
  }

  async startAntePhase(roomId: string): Promise<void> {
    let gameState = await this.redisService.getGameState(roomId);
    if (!gameState || gameState.status !== 'ante') {
      console.log('üö´ startAntePhase skipped:', {
        roomId,
        hasGameState: !!gameState,
        status: gameState?.status
      });
      return;
    }
    
    console.log('üéØ startAntePhase started:', {
      roomId,
      status: gameState.status,
      playersCount: gameState.players.length,
      activePlayersCount: gameState.players.filter(p => p.isActive).length
    });

    const { updatedGameState, actions } = this.bettingService.processAnte(
      gameState,
      gameState.minBet,
    );
    gameState = updatedGameState;
    gameState.log.push(...actions);

    const activePlayers = gameState.players.filter((p) => p.isActive);
    if (activePlayers.length < 2) {
      if (activePlayers.length === 1) {
        await this.endGameWithWinner(roomId, activePlayers[0].id);
      } else {
        await this.endGame(roomId);
      }
      return;
    }

    const dealResult = this.gameStateService.dealCardsToPlayers(gameState);
    gameState = dealResult.updatedGameState;
    gameState.log.push(...dealResult.actions);

    const phaseResult = this.gameStateService.moveToNextPhase(
      gameState,
      'blind_betting',
    );
    gameState = phaseResult.updatedGameState;
    gameState.log.push(...phaseResult.actions);

    gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
      gameState.players,
      gameState.dealerIndex,
    );

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);
  }

  // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å–≤–∞—Ä—ã
  private svaraTimers: Map<string, NodeJS.Timeout> = new Map();
  
  async joinSvara(
    roomId: string,
    telegramId: string,
  ): Promise<GameActionResult> {
    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState || gameState.status !== 'svara_pending') {
      return { success: false, error: '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–∞—Ä–µ' };
    }

    const player = gameState.players.find((p) => p.id === telegramId);
    if (!player) {
      return { success: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–≤–∞—Ä—ã (–∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º)
    if (gameState.svaraParticipants.includes(telegramId)) {
      return { success: false, error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Å–≤–∞—Ä–µ' };
    }

    const svaraBuyInAmount = gameState.pot;
    if (player.balance < svaraBuyInAmount) {
      return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–≤–∞—Ä—É' };
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–Ω–∫
    player.balance -= svaraBuyInAmount;
    gameState.pot += svaraBuyInAmount;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–≤–∞—Ä—ã
    gameState.svaraParticipants.push(telegramId);

    const action: GameAction = {
      type: 'join',
      telegramId,
      timestamp: Date.now(),
      message: `–ò–≥—Ä–æ–∫ ${player.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–≤–∞—Ä–µ, –¥–æ–±–∞–≤–∏–≤ –≤ –±–∞–Ω–∫ ${svaraBuyInAmount}`,
    };
    gameState.log.push(action);

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

    return { success: true, gameState };
  }

  async skipSvara(
    roomId: string,
    telegramId: string,
  ): Promise<GameActionResult> {
    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState || gameState.status !== 'svara_pending') {
      return { success: false, error: '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–∞—Ä—É' };
    }

    const player = gameState.players.find((p) => p.id === telegramId);
    if (!player) {
      return { success: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã UI –º–æ–≥ –∑–∞–∫—Ä—ã—Ç—å—Å—è
    // –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, 
    // —Ç–∞–∫ –∫–∞–∫ resolveSvara –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ç–∞–π–º–µ—Ä—É
    const action: GameAction = {
      type: 'fold', // –ò—Å–ø–æ–ª—å–∑—É–µ–º fold –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏ –Ω–æ–≤—ã–π —Ç–∏–ø
      telegramId,
      timestamp: Date.now(),
      message: `–ò–≥—Ä–æ–∫ ${player.username} —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–∞—Ä—É`,
    };
    gameState.log.push(action);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –º–æ–≥ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ)
    await this.redisService.publishGameUpdate(roomId, gameState);

    return { success: true, gameState };
  }

  async processAction(
    roomId: string,
    telegramId: string,
    action: string,
    amount?: number,
  ): Promise<GameActionResult> {
    if (action === 'join_svara') {
      return this.joinSvara(roomId, telegramId);
    }
    if (action === 'skip_svara') {
      return this.skipSvara(roomId, telegramId);
    }
    
    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState) {
      return { success: false, error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }

    const playerIndex = gameState.players.findIndex((p) => p.id === telegramId);
    if (playerIndex === -1) {
      return { success: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    if (gameState.currentPlayerIndex !== playerIndex) {
      return { success: false, error: '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥' };
    }

    const { canPerform, error } = this.bettingService.canPerformAction(
      gameState.players[playerIndex],
      action,
      gameState,
    );
    if (!canPerform) {
      return { success: false, error };
    }

    switch (action) {
      case 'fold':
        return this.handleFold(roomId, gameState, playerIndex);
      case 'blind_bet':
      case 'look':
        return this.processBlindBettingAction(
          roomId,
          gameState,
          playerIndex,
          action,
        );
      case 'call':
      case 'raise':
        return this.processBettingAction(
          roomId,
          gameState,
          playerIndex,
          action,
          amount,
        );
      default:
        return {
          success: false,
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ',
        };
    }
  }

  private async handleFold(
    roomId: string,
    gameState: GameState,
    playerIndex: number,
  ): Promise<GameActionResult> {
    const player = gameState.players[playerIndex];
    gameState.players[playerIndex] = this.playerService.updatePlayerStatus(
      player,
      { hasFolded: true, isActive: false, lastAction: 'fold' },
    );

    const foldAction: GameAction = {
      type: 'fold',
      telegramId: player.id,
      timestamp: Date.now(),
      message: `–ò–≥—Ä–æ–∫ ${player.username} —Å–±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—ã`,
    };
    gameState.log.push(foldAction);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ –≤ –ë–î –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–∞—Ä—Ç
    try {
      await this.usersService.updatePlayerBalance(player.id, player.balance);
      console.log(
        `Player ${player.id} folded - balance saved to DB: ${player.balance}`,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫—É
      await this.redisService.publishBalanceUpdate(player.id, player.balance);
    } catch (error) {
      console.error(
        `Failed to save balance to DB for folded player ${player.id}:`,
        error,
      );
    }

    const activePlayers = gameState.players.filter(
      (p) => p.isActive && !p.hasFolded,
    );

    if (activePlayers.length === 1) {
      await this.endGameWithWinner(roomId, activePlayers[0].id);
      return { success: true };
    } else {
      gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
        gameState.players,
        gameState.currentPlayerIndex,
      );
      if (this.bettingService.isBettingRoundComplete(gameState)) {
        await this.endBettingRound(roomId, gameState);
        return { success: true };
      }
    }

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);
    return { success: true, gameState };
  }

  private async processBlindBettingAction(
    roomId: string,
    gameState: GameState,
    playerIndex: number,
    action: string,
  ): Promise<GameActionResult> {
    const player = gameState.players[playerIndex];
    switch (action) {
      case 'blind_bet': {
        const blindBetAmount =
          gameState.lastBlindBet > 0
            ? gameState.lastBlindBet * 2
            : gameState.minBet;
        if (player.balance < blindBetAmount) {
          return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' };
        }
        const { updatedPlayer, action: blindAction } =
          this.playerService.processPlayerBet(
            player,
            blindBetAmount,
            'blind_bet',
          );
        gameState.players[playerIndex] = updatedPlayer;
        gameState.pot = Number((gameState.pot + blindBetAmount).toFixed(2));
        gameState.lastBlindBet = blindBetAmount;
        gameState.lastBlindBettorIndex = playerIndex; // Set the index of the blind bettor
        gameState.log.push(blindAction);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        gameState.isAnimating = true;
        gameState.animationType = 'chip_fly';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);
        
        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        gameState.isAnimating = false;
        gameState.animationType = undefined;
        
        gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
          gameState.players,
          gameState.currentPlayerIndex,
        );
        break;
      }
      case 'look': {
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞—Ä—Ç
        const mandatoryBet =
          gameState.lastBlindBet > 0
            ? gameState.lastBlindBet * 2
            : gameState.minBet;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        if (player.balance < mandatoryBet) {
          // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –∏–≥—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—ã–≤–∞–µ—Ç
          return this.handleFold(roomId, gameState, playerIndex);
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É —Å –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
        const { updatedPlayer, action: betAction } =
          this.playerService.processPlayerBet(player, mandatoryBet, 'call');
        gameState.players[playerIndex] = updatedPlayer;
        gameState.pot = Number((gameState.pot + mandatoryBet).toFixed(2));
        gameState.log.push(betAction);

        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∫–∞—Ä—Ç—ã
        gameState.players[playerIndex] = this.playerService.updatePlayerStatus(
          gameState.players[playerIndex],
          { hasLooked: true, lastAction: 'look' },
        );
        const lookAction: GameAction = {
          type: 'look',
          telegramId: player.id,
          timestamp: Date.now(),
          message: `–ò–≥—Ä–æ–∫ ${player.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∫–∞—Ä—Ç—ã`,
        };
        gameState.log.push(lookAction);

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ–∞–∑—É betting
        const phaseResult = this.gameStateService.moveToNextPhase(
          gameState,
          'betting',
        );
        gameState = phaseResult.updatedGameState;
        gameState.log.push(...phaseResult.actions);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è —Ñ–∞–∑—ã betting
        gameState.currentBet = mandatoryBet;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ call
        gameState.lastActionAmount = mandatoryBet;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–≤—ã—Å–∏–≤—à–µ–≥–æ –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        gameState.lastRaiseIndex = playerIndex;

        // –í—Å–µ –∏–≥—Ä–æ–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–º–æ—Ç—Ä—è—Ç –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ betting
        for (let i = 0; i < gameState.players.length; i++) {
          if (
            gameState.players[i].isActive &&
            !gameState.players[i].hasFolded
          ) {
            gameState.players[i] = this.playerService.updatePlayerStatus(
              gameState.players[i],
              { hasLooked: true },
            );
          }
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        const scoreResult =
          this.gameStateService.calculateScoresForPlayers(gameState);
        gameState = scoreResult.updatedGameState;
        gameState.log.push(...scoreResult.actions);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        gameState.isAnimating = true;
        gameState.animationType = 'chip_fly';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);
        
        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        gameState.isAnimating = false;
        gameState.animationType = undefined;
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É (–≤–∞–∂–Ω–æ: —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É!)
        gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
          gameState.players,
          playerIndex,
        );
        
        break;
      }
    }
    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);
    return { success: true, gameState };
  }

  private async processBettingAction(
    roomId: string,
    gameState: GameState,
    playerIndex: number,
    action: string,
    amount?: number,
  ): Promise<GameActionResult> {
    const player = gameState.players[playerIndex];
    switch (action) {
      case 'call': {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º lastActionAmount –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ call
        const callAmount = Number((gameState.lastActionAmount - player.currentBet).toFixed(2));
        if (callAmount <= 0) {
          return { success: false, error: '–°—É–º–º–∞ —É—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' };
        }
        if (player.balance < callAmount) {
          return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' };
        }
        const { updatedPlayer, action: callAction } =
          this.playerService.processPlayerBet(player, callAmount, 'call');
        gameState.players[playerIndex] = updatedPlayer;
        gameState.pot = Number((gameState.pot + callAmount).toFixed(2));
        gameState.lastActionAmount = gameState.lastActionAmount; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        gameState.log.push(callAction);
        break;
      }
      case 'raise': {
        if (!amount || amount < gameState.currentBet * 2) {
          return {
            success: false,
            error: `–ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ ${gameState.currentBet}`,
          };
        }
        const raiseAmount = Number((amount - player.currentBet).toFixed(2));
        if (raiseAmount <= 0) {
          return { success: false, error: '–°—É–º–º–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' };
        }
        if (player.balance < raiseAmount) {
          return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' };
        }
        const { updatedPlayer, action: raiseAction } =
          this.playerService.processPlayerBet(player, raiseAmount, 'raise');
        gameState.players[playerIndex] = updatedPlayer;
        gameState.pot = Number((gameState.pot + raiseAmount).toFixed(2));
        gameState.currentBet = Number(amount.toFixed(2));
        gameState.lastRaiseIndex = playerIndex;
        gameState.lastActionAmount = amount; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        gameState.log.push(raiseAction);
        break;
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    gameState.isAnimating = true;
    gameState.animationType = 'chip_fly';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);
    
    // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    gameState.isAnimating = false;
    gameState.animationType = undefined;

    gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
      gameState.players,
      gameState.currentPlayerIndex,
    );
    if (this.bettingService.isBettingRoundComplete(gameState)) {
      await this.endBettingRound(roomId, gameState);
    } else {
      await this.redisService.setGameState(roomId, gameState);
      await this.redisService.publishGameUpdate(roomId, gameState);
    }
    return { success: true, gameState };
  }

  private async endBettingRound(
    roomId: string,
    gameState: GameState,
  ): Promise<void> {
    const phaseResult = this.gameStateService.moveToNextPhase(
      gameState,
      'showdown',
    );
    gameState = phaseResult.updatedGameState;
    gameState.log.push(...phaseResult.actions);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–≤—ã—Å–∏–≤—à–∏–π —Å—Ç–∞–≤–∫—É
    const wasRaise = gameState.lastRaiseIndex !== undefined;

    // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≤—ã—à–∞–ª —Å—Ç–∞–≤–∫–∏, –¥–∏–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫
    if (!wasRaise) {
      const dealer = gameState.players[gameState.dealerIndex];
      if (dealer && dealer.isActive && !dealer.hasFolded) {
        const potAmount = Number(gameState.pot.toFixed(2)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–Ω–∫–∞ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
        dealer.balance += potAmount;
        gameState.pot = 0.00;

        const dealerWinAction: GameAction = {
          type: 'win',
          telegramId: dealer.id,
          amount: potAmount,
          timestamp: Date.now(),
          message: `–î–∏–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫ (${potAmount}) - –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≤—ã—à–∞–ª —Å—Ç–∞–≤–∫–∏`,
        };
        gameState.log.push(dealerWinAction);

        await this.redisService.setGameState(roomId, gameState);
        await this.redisService.publishGameUpdate(roomId, gameState);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –¥–∏–ª–µ—Ä–∞ –≤ –ë–î
        try {
          await this.usersService.updatePlayerBalance(
            dealer.id,
            dealer.balance,
          );
          await this.redisService.publishBalanceUpdate(
            dealer.id,
            dealer.balance,
          );
        } catch (error) {
          console.error(`Failed to save dealer balance to DB:`, error);
        }

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        setTimeout(() => {
          this.startGame(roomId).catch((err) =>
            console.error(`Failed to auto-restart game ${roomId}`, err),
          );
        }, 5000);
        return;
      }
    }

    const scoreResult =
      this.gameStateService.calculateScoresForPlayers(gameState);
    gameState = scoreResult.updatedGameState;
    gameState.log.push(...scoreResult.actions);

    const winners = this.playerService.determineWinners(gameState.players);
    gameState.winners = winners;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    console.log('üèÜ Winners Debug:', {
      roomId,
      winnersCount: winners.length,
      winners: winners.map(w => ({ id: w.id, username: w.username, score: w.score })),
      allPlayers: gameState.players.map(p => ({ 
        id: p.id, 
        username: p.username, 
        score: p.score, 
        isActive: p.isActive, 
        hasFolded: p.hasFolded 
      }))
    });

    if (winners.length > 1) {
      // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–∞—Ä—ã
      const phaseResult = this.gameStateService.moveToNextPhase(
        gameState,
        'svara_pending',
      );
      gameState = phaseResult.updatedGameState;
      gameState.log.push(...phaseResult.actions);

      gameState.isSvara = true;
      gameState.svaraParticipants = winners.map((w) => w.id);
      gameState.winners = winners;

      const svaraAction: GameAction = {
        type: 'svara',
        telegramId: 'system',
        timestamp: Date.now(),
        message: '–û–±—ä—è–≤–ª–µ–Ω–∞ "–°–≤–∞—Ä–∞"! –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥.',
      };
      gameState.log.push(svaraAction);

      await this.redisService.setGameState(roomId, gameState);
      await this.redisService.publishGameUpdate(roomId, gameState);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–≤–∞—Ä—ã
      const timer = setTimeout(() => {
        this.resolveSvara(roomId).catch((error) => {
          console.error(`Error resolving svara for room ${roomId}:`, error);
        });
      }, 20000); // 20 —Å–µ–∫—É–Ω–¥
      this.svaraTimers.set(roomId, timer);

    } else if (winners.length === 1) {
      await this.endGameWithWinner(roomId, winners[0].id);
    } else {
      await this.endGame(roomId);
    }
  }

  private async resolveSvara(roomId: string): Promise<void> {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (this.svaraTimers.has(roomId)) {
      clearTimeout(this.svaraTimers.get(roomId));
      this.svaraTimers.delete(roomId);
    }

    const gameState = await this.redisService.getGameState(roomId);
    if (!gameState || gameState.status !== 'svara_pending') {
      return; // –ò–≥—Ä–∞ —É–∂–µ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–≤–∞—Ä—ã
    }

    const participants = gameState.svaraParticipants;
    if (participants.length >= 2) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–≤–∞—Ä—É
      await this.startSvaraGame(roomId, participants);
    } else if (participants.length === 1) {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å), –æ–Ω –∑–∞–±–∏—Ä–∞–µ—Ç –±–∞–Ω–∫
      await this.endGameWithWinner(roomId, participants[0]);
    } else {
      // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ), –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
      await this.endGame(roomId);
    }
  }

  private async startSvaraGame(
    roomId: string,
    participantIds: string[],
  ): Promise<void> {
    let gameState = await this.redisService.getGameState(roomId);
    if (!gameState) return;

    const { updatedGameState, actions } =
      this.gameStateService.initializeSvaraGame(gameState, participantIds);
    gameState = updatedGameState;
    gameState.log.push(...actions);

    const dealResult = this.gameStateService.dealCardsToPlayers(gameState);
    gameState = dealResult.updatedGameState;
    gameState.log.push(...dealResult.actions);

    const phaseResult = this.gameStateService.moveToNextPhase(
      gameState,
      'blind_betting',
    );
    gameState = phaseResult.updatedGameState;
    gameState.log.push(...phaseResult.actions);

    gameState.currentPlayerIndex = this.playerService.findNextActivePlayer(
      gameState.players,
      gameState.dealerIndex,
    );

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);
  }

  private async endGameWithWinner(
    roomId: string,
    winnerId: string,
  ): Promise<void> {
    let gameState = await this.redisService.getGameState(roomId);
    if (!gameState) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const originalPot = gameState.pot;

    const { updatedGameState, actions } = this.bettingService.processWinnings(
      gameState,
      [winnerId],
    );
    gameState = updatedGameState;
    gameState.log.push(...actions);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    gameState.pot = originalPot;

    const phaseResult = this.gameStateService.moveToNextPhase(
      gameState,
      'finished',
    );
    gameState = phaseResult.updatedGameState;
    gameState.log.push(...phaseResult.actions);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–±–µ–¥—ã
    gameState.showWinnerAnimation = true;
    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

            // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–±–µ–¥—ã
        await new Promise(resolve => setTimeout(resolve, 3000));

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–∏—à–µ–∫ –∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    gameState.isAnimating = true;
    gameState.animationType = 'win_animation';
    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

    // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–∏—à–µ–∫
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –æ–±–Ω—É–ª—è–µ–º –±–∞–Ω–∫
    gameState.isAnimating = false;
    gameState.animationType = undefined;
    gameState.showWinnerAnimation = false;
    gameState.pot = 0.00; // –û–±–Ω—É–ª—è–µ–º –±–∞–Ω–∫ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const winnerPlayer = gameState.players.find(p => p.id === winnerId);
    gameState.winners = winnerPlayer ? [winnerPlayer] : [];
    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ë–î –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
    try {
      const playersToUpdate = gameState.players.map((player) => ({
        telegramId: player.id,
        balance: player.balance,
      }));
      await this.usersService.updateMultiplePlayerBalances(playersToUpdate);
      console.log(
        `Game ${roomId} finished - balances saved to DB for ${playersToUpdate.length} players`,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      for (const player of gameState.players) {
        await this.redisService.publishBalanceUpdate(player.id, player.balance);
      }
    } catch (error) {
      console.error(`Failed to save balances to DB for game ${roomId}:`, error);
    }

    const room = await this.redisService.getRoom(roomId);
    if (room) {
      room.status = 'finished';
      room.winner = winnerId;
      room.finishedAt = new Date();
      await this.redisService.setRoom(roomId, room);
      await this.redisService.publishRoomUpdate(roomId, room);
    }

    // Auto-restart game after 2 seconds
    setTimeout(() => {
      this.startGame(roomId).catch((err) =>
        console.error(`Failed to auto-restart game ${roomId}`, err),
      );
    }, 2000);
  }

  private async endGame(roomId: string): Promise<void> {
    let gameState = await this.redisService.getGameState(roomId);
    if (!gameState) return;

    const phaseResult = this.gameStateService.moveToNextPhase(
      gameState,
      'finished',
    );
    gameState = phaseResult.updatedGameState;
    gameState.log.push(...phaseResult.actions);

    const action: GameAction = {
      type: 'join',
      telegramId: 'system',
      timestamp: Date.now(),
      message: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è',
    };
    gameState.log.push(action);

    await this.redisService.setGameState(roomId, gameState);
    await this.redisService.publishGameUpdate(roomId, gameState);

    const room = await this.redisService.getRoom(roomId);
    if (room) {
      room.status = 'finished';
      room.finishedAt = new Date();
      await this.redisService.setRoom(roomId, room);
      await this.redisService.publishRoomUpdate(roomId, room);
    }

    // Auto-restart game after 5 seconds
    setTimeout(() => {
      this.startGame(roomId).catch((err) =>
        console.error(`Failed to auto-restart game ${roomId}`, err),
      );
    }, 5000);
  }
}
