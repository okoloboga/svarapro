import { Injectable } from '@nestjs/common';
import { GameState, Player, GameAction } from '../../../types/game';

@Injectable()
export class BettingService {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω—Ç–µ (–≤—Ö–æ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏)
  processAnte(
    gameState: GameState,
    minBet: number,
  ): {
    updatedGameState: GameState;
    actions: GameAction[];
  } {
    const updatedGameState = { ...gameState };
    const actions: GameAction[] = [];

    for (let i = 0; i < updatedGameState.players.length; i++) {
      const player = updatedGameState.players[i];
      if (player.isActive) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if (player.balance < minBet) {
          player.isActive = false;
          player.hasFolded = true;

          // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
          const action: GameAction = {
            type: 'fold',
            telegramId: player.id,
            timestamp: Date.now(),
            message: `–ò–≥—Ä–æ–∫ ${player.username} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–Ω—Ç–µ`,
          };
          actions.push(action);
        } else {
          // –°–Ω–∏–º–∞–µ–º –∞–Ω—Ç–µ —Å –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
          const roundedMinBet = Number(minBet.toFixed(2));
          player.balance -= roundedMinBet;
          player.tableBalance += roundedMinBet;
          updatedGameState.pot = Number(
            (updatedGameState.pot + roundedMinBet).toFixed(2),
          );

          // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
          const action: GameAction = {
            type: 'ante',
            telegramId: player.id,
            amount: minBet,
            timestamp: Date.now(),
            message: `–ò–≥—Ä–æ–∫ ${player.username} –≤–Ω–µ—Å –∞–Ω—Ç–µ ${minBet}`,
          };
          actions.push(action);
        }
      }
    }

    return { updatedGameState, actions };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –∫—Ä—É–≥ —Å—Ç–∞–≤–æ–∫
  isBettingRoundComplete(gameState: GameState): boolean {
    const activePlayers = gameState.players.filter(
      (p) => p.isActive && !p.hasFolded,
    );

    if (activePlayers.length <= 1) {
      return true;
    }

    // –ï—Å–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ, —Ä–∞—É–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω.
    if (gameState.lastRaiseIndex === undefined) {
      return false;
    }

    // –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, –µ—Å–ª–∏ —Ö–æ–¥ –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∏–≥—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–≤—ã—Å–∏–ª —Å—Ç–∞–≤–∫—É.
    // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π —Ö–æ–¥ (call –∏–ª–∏ fold).
    if (gameState.currentPlayerIndex === gameState.lastRaiseIndex) {
      const raiser = gameState.players[gameState.lastRaiseIndex];
      if (!raiser) return false; // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

      const requiredBet = raiser.totalBet;
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–≤–Ω—ã.
      const allBetsEqual = activePlayers.every(
        (p) => p.totalBet === requiredBet,
      );
      return allBetsEqual;
    }

    return false;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
  processWinnings(
    gameState: GameState,
    winnerIds: string[],
  ): {
    updatedGameState: GameState;
    actions: GameAction[];
  } {
    const updatedGameState = { ...gameState };
    const actions: GameAction[] = [];

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é (5% –æ—Ç –±–∞–Ω–∫–∞)
    const rake = Number((updatedGameState.pot * 0.05).toFixed(2));
    const winAmount = Number((updatedGameState.pot - rake).toFixed(2));

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –¥–µ–ª–∏–º –≤—ã–∏–≥—Ä—ã—à –ø–æ—Ä–æ–≤–Ω—É
    const winPerPlayer = Number((winAmount / winnerIds.length).toFixed(2));

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞
    console.log('üéØ Win Calculation Debug:', {
      pot: updatedGameState.pot,
      rake,
      winAmount,
      winnerIds,
      winnerIdsLength: winnerIds.length,
      winPerPlayer,
    });

    for (const winnerId of winnerIds) {
      const winner = updatedGameState.players.find((p) => p.id === winnerId);
      if (winner) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        const roundedWinPerPlayer = Number(winPerPlayer.toFixed(2));
        winner.balance += roundedWinPerPlayer;

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–≥
        const action: GameAction = {
          type: 'win',
          telegramId: winnerId,
          amount: winPerPlayer,
          timestamp: Date.now(),
          message: `–ò–≥—Ä–æ–∫ ${winner.username} –≤—ã–∏–≥—Ä–∞–ª ${winPerPlayer}`,
        };
        actions.push(action);
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏ –æ–±–Ω—É–ª—è–µ–º –±–∞–Ω–∫
    updatedGameState.rake = rake;
    updatedGameState.pot = 0.0;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    updatedGameState.winners = winnerIds
      .map((id) => updatedGameState.players.find((p) => p.id === id))
      .filter(Boolean) as Player[];

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ª–æ–≥
    if (rake > 0) {
      const action: GameAction = {
        type: 'join',
        telegramId: 'system',
        timestamp: Date.now(),
        message: `–ö–æ–º–∏—Å—Å–∏—è: ${rake}`,
      };
      actions.push(action);
    }

    return { updatedGameState, actions };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
  canPerformAction(
    player: Player,
    action: string,
    gameState: GameState,
  ): {
    canPerform: boolean;
    error?: string;
  } {
    if (!player.isActive || player.hasFolded) {
      return { canPerform: false, error: '–ò–≥—Ä–æ–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' };
    }

    switch (action) {
      case 'blind_bet':
        if (player.hasLooked) {
          return { canPerform: false, error: '–í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –∫–∞—Ä—Ç—ã' };
        }
        return { canPerform: true };

      case 'look':
        if (player.hasLooked) {
          return { canPerform: false, error: '–í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –∫–∞—Ä—Ç—ã' };
        }
        return { canPerform: true };

      case 'call': {
        // –†–∞–∑—Ä–µ—à–∞–µ–º call –≤ —Ñ–∞–∑–µ betting
        if (gameState.status === 'betting') {
          // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–ª–ª, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º, –∫—Ç–æ –ø–æ–≤—ã—à–∞–ª —Å—Ç–∞–≤–∫—É.
          // –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∞—É–Ω–¥ —Ç–æ—Ä–≥–æ–≤.
          const isLastRaiser =
            gameState.lastRaiseIndex !== undefined &&
            gameState.players[gameState.lastRaiseIndex]?.id === player.id;

          if (isLastRaiser) {
            return { canPerform: true }; // Allow last raiser to "call" to end the round
          }

          // Under the new rules, you can always call the last bet.
          // The check for whether a bet exists is handled by game.service.
          return { canPerform: true };
        }
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º call –≤ —Ñ–∞–∑–µ blind_betting –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∫–∞—Ä—Ç—ã
        if (gameState.status === 'blind_betting' && player.hasLookedAndMustAct) {
          return { canPerform: true };
        }
        
        return { canPerform: false, error: '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è —É—Ä–∞–≤–Ω–∏–≤–∞—Ç—å' };
      }

      case 'raise': {
        if (gameState.status === 'betting') {
          return { canPerform: true };
        }
        if (gameState.status === 'blind_betting' && player.hasLookedAndMustAct) {
          return { canPerform: true };
        }
        return { canPerform: false, error: '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø–æ–≤—ã—à–∞—Ç—å' };
      }

      case 'fold':
        return { canPerform: true };

      case 'all_in':
        return { canPerform: true };

      default:
        return { canPerform: false, error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' };
    }
  }
}
