import { Injectable } from '@nestjs/common';
import { RedisService } from '../../services/redis.service';
import { Room } from '../../types/game';
import { CreateRoomDto } from './dto/create-room.dto';
import { GameStateService } from '../game/services/game-state.service';
import { User } from '../../entities/user.entity';
import { UsersService } from '../users/users.service';
import { TelegramService } from '../../services/telegram.service';
import { SystemRoomsService } from '../system-rooms/system-rooms.service';

@Injectable()
export class RoomsService {
  constructor(
    private readonly redisService: RedisService,
    private readonly gameStateService: GameStateService,
    private readonly usersService: UsersService,
    private readonly telegramService: TelegramService,
    private readonly systemRoomsService: SystemRoomsService,
  ) {}

  async getRooms(): Promise<Room[]> {
    // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã (–æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏)
    const systemRooms = await this.systemRoomsService.getSystemRooms();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    const roomIds = await this.redisService.getActiveRooms();
    const userRooms: Room[] = [];
    
    for (const roomId of roomIds) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –≤—ã—à–µ
      if (this.systemRoomsService.isSystemRoom(roomId)) {
        continue;
      }
      
      const room = await this.redisService.getRoom(roomId);
      if (room) {
        userRooms.push(room);
      }
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã, –ø–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
    return [...systemRooms, ...userRooms];
  }

  async getRoomDetails(
    roomId: string,
  ): Promise<(Partial<Room> & { playerCount: number }) | null> {
    const room = await this.redisService.getRoom(roomId);
    if (!room) {
      return null;
    }

    return {
      minBet: room.minBet,
      playerCount: room.players.length,
      maxPlayers: room.maxPlayers,
      status: room.status,
    };
  }

  async createRoom(createRoomDto: CreateRoomDto, user: User): Promise<Room> {
    let roomId: string;

    if (createRoomDto.type === 'private') {
      // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç ID = –ø–∞—Ä–æ–ª—å
      roomId = createRoomDto.password!;
    } else {
      // –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π ID
      roomId = Math.floor(1000 + Math.random() * 9000).toString();
    }

    const newRoom: Room = {
      roomId,
      minBet: createRoomDto.minBet,
      type: createRoomDto.type,
      players: [],
      spectators: [],
      status: 'waiting',
      maxPlayers: 6,
      createdAt: new Date(),
      password: createRoomDto.password,
    };

    await this.redisService.setRoom(roomId, newRoom);
    await this.redisService.addToActiveRooms(roomId);

    const initialGameState = this.gameStateService.createInitialGameState(
      roomId,
      createRoomDto.minBet,
    );
    await this.redisService.setGameState(roomId, initialGameState);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
    if (createRoomDto.type === 'private' && createRoomDto.password) {
      try {
        const message =
          `üéÆ *–ù–æ–≤–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n` +
          `üîê *–ü–∞—Ä–æ–ª—å:* \`${createRoomDto.password}\`\n` +
          `üí∞ *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:* $${createRoomDto.minBet}\n\n` +
          `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∏–≥—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–æ–ª—å –≤—ã—à–µ!`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
        await this.telegramService.sendMessage(user.telegramId, message);
      } catch (error) {
        console.error(
          `Failed to send Telegram notification for private room ${roomId}:`,
          error,
        );
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      }
    }

    return newRoom;
  }

  async joinRoom(roomId: string, user: User): Promise<Room> {
    // –ò—â–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ ID
    const room = await this.redisService.getRoom(roomId);

    if (!room) {
      throw new Error('Room not found');
    }

    if (room.players.includes(user.telegramId)) {
      // User is already in the room, just return the room
      return room;
    }

    if (room.players.length >= room.maxPlayers) {
      // Room is full, add as spectator
      if (!room.spectators.includes(user.telegramId)) {
        room.spectators.push(user.telegramId);
        await this.redisService.setRoom(room.roomId, room);
      }
      return room;
    }

    // Add to room players list, but not to gameState players
    room.players.push(user.telegramId);
    await this.redisService.setRoom(room.roomId, room);

    return room;
  }
}
